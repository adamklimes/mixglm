% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mixglm.R
\name{mixglmSimulation}
\alias{mixglmSimulation}
\title{Simulate Instances of a mixture model}
\usage{
mixglmSimulation(
  numSims,
  stateValModels,
  stateProbModels,
  statePrecModels,
  inputData,
  numStates = NULL,
  stateValError = gaussian,
  coefficientValues = NULL
)
}
\arguments{
\item{numSims}{The number of simulations to draw from the mixture model.}

\item{stateValModels}{A formula describing the regression relationship between the mean
of the response variable and the covariates for all mixture components, or a list of formulas
with each element giving the regression relationship between the mean
of the response variable and the covariates for each mixture component (ordered according to intercept of the
mixture component on the y-axis).  The response variable must be given on the
left-hand side of the formula.}

\item{stateProbModels}{A formula describing the regression relationship between the probability
of the existence of mixture components and the covariates, or a list
of formulas with each element giving the regression relationship between the probability
of the existence of a mixture component and its covariates (ordered
according to intercept of the mixture component on the y-axis).}

\item{statePrecModels}{A formula describing the regression relationship between the variances
in the mixture components and the covariates, or a list of
formulas with each mixture component giving the regression relationship between the variance in the
mixture component and the covariates for each mixture component (ordered according to
intercept of the mixture component on the y-axis).}

\item{inputData}{A data frame containing the covariate information and the response
variable.}

\item{numStates}{An integer scalar containing the number of components in the mixture.
If any of the \code{stateValModels}, \code{stateProbModels}, or \code{statePrecModels} parameters
is a list then \code{numStates} can be omitted and is therefore set to the length of the
list.}

\item{stateValError}{A description of the error distribution and link function to be used
in the model describing the ecosystem state value.  This can be from the \link[stats]{family}
specification or \code{character} scalar with the following possible values: \code{"gaussian"},
\code{"gamma"}, \code{"beta"}, or \code{"negbinomial"}.}

\item{coefficientValues}{A list containing the values of the coefficients to use in the
simulation.}
}
\value{
A list containg a vector of simulated values for each stochastic node.  In addition the
following elements are appended to the list:
\item{\code{linStateVal}}{ A matrix containing the predicted response variable values at each row
of the input covariate data.frame.  Each column represents the predicted response variable value
for each mixture component}
\item{\code{linStatePrec}}{ A matrix containing the predicted precision of the response variable
at each row of the input covariate data.frame.  Each column represents the predicted
precision of the response variable value for each mixture component}
\item{\code{linStateProb}}{ A matrix containing the probability of each mixture component existing
at each row of the input covariate data.frame.  Each column represents the probability of each
mixture component existing}
}
\description{
This function takes a set of model specifications for the three sub-models
of a mixture model and generates a simulation from this
model specification
}
\details{
Used parametrization of gamma, beta, and negbinomial distribution using mean and
precision is internally reparametrized into typical shape and rate parametrization for gamma,
two shape parameters for beta, and size and probability parameters for negbinomial. For all
these distributions, their parameters are constrained (e.g. shape parameters of the beta
distribution have to be positive). Consequently, not all combinations of mean and precision
can be used.
Generally to get legitimate coefficient values: Standardize your predictors and start with low
coefficient values (for beta distribution, increase precision).
}
\examples{
{
dat <- data.frame(x = rnorm(200), y = rnorm(200))
cfValues <- list(
  "intercept_stateVal" = c(-1.0, 0.5, 0.5),
  "x_stateVal" = c(-0.05, 0.05, 0.1),
  "intercept_stateProb" = c(NA, -1.0, 1.0),
  "intercept_statePrec" = c(0.5, 1.0, 1.5)
 )
 mixglmSimulation(
   numSims = 1,
   stateValModels = y ~ x,
   stateProbModels = ~ 1,
   statePrecModels = ~ 1,
   inputData = dat,
   numStates = 2,
   stateValError = gaussian,
   coefficientValues = cfValues
 )
}
}
\author{
Joseph D. Chipperfield, \email{joechip90@googlemail.com}
}
