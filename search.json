[{"path":"https://adamklimes.github.io/mixglm/articles/caseStudy.html","id":"tree-cover-in-south-america","dir":"Articles","previous_headings":"","what":"Tree cover in South America","title":"Case Study","text":"case study replicates analyses Hirota et al. (2011) Flores et al. (2024). two studies model tree cover South America Amazon respectively along precipitation gradient. used tree cover data 2001. Replication analysis done using tree cover year 2025 whole South America.","code":""},{"path":"https://adamklimes.github.io/mixglm/articles/caseStudy.html","id":"tree-cover-dataset","dir":"Articles","previous_headings":"Tree cover in South America","what":"Tree cover dataset","title":"Case Study","text":"mixglm package provides dataset treeCover includes tree cover, precipitation, temperature, predicted precipitation end 21st century coordinates 5,000 data-points across South America. case study, model stability landscape tropical forests savanna alternative states along precipitation temperature gradients. observations high precipitation low temperature. prevents us estimating reliably stability landscape parts respective gradients. Therefore, constrain analyses well-represented parts precipitation (4000 mm/yr) temperature gradients (0°C).","code":"library(mixglm) #> Loading required package: nimble #> nimble version 1.3.0 is loaded. #> For more information on NIMBLE and a User Manual, #> please visit https://R-nimble.org. #>  #> Note for advanced users who have written their own MCMC samplers: #>   As of version 0.13.0, NIMBLE's protocol for handling posterior #>   predictive nodes has changed in a way that could affect user-defined #>   samplers in some situations. Please see Section 15.5.1 of the User Manual. #>  #> Attaching package: 'nimble' #> The following object is masked from 'package:stats': #>  #>     simulate #> The following object is masked from 'package:base': #>  #>     declare  # See ?treeCover for additional information  str(treeCover) #> 'data.frame':    5000 obs. of  6 variables: #>  $ x         : num  -47.7 -70.5 -61 -54.7 -69.8 ... #>  $ y         : num  -24.47 -14.57 -10 2.97 -18.56 ... #>  $ treeCover : num  74.51 5.44 79.71 68.72 1.42 ... #>  $ precip    : num  1917 1272 2096 2514 242 ... #>  $ temp      : num  22.21 6.67 25.58 25.88 15.45 ... #>  $ precip2100: num  1627 1317 1580 1544 876 ... plot(treeCover$treeCover ~ treeCover$precip, cex = 0.1, ylab = \"Tree cover (%)\",   xlab = \"Precipitation (mm/yr)\") abline(v = 4000, lty = 2) plot(treeCover$treeCover ~ treeCover$temp, cex = 0.1, ylab = \"Tree cover (%)\",   xlab = \"Temperature (°C)\") abline(v = 0, lty = 2) datTC <- treeCover[treeCover$precip < 4000 & treeCover$temp > 0, ] # 4860 observations"},{"path":"https://adamklimes.github.io/mixglm/articles/caseStudy.html","id":"stability-landscape-along-precipitation-gradient","dir":"Articles","previous_headings":"Tree cover in South America","what":"Stability landscape along precipitation gradient","title":"Case Study","text":"First, model stability landscape along precipitation gradient. Tree cover upper (100%) well lower (0%) limit, therefore use beta mixture rather Gaussian (normal). beta-distributed variable can values 0 1 (excluding 0 1). Thus, calculate proportion tree cover shift values slightly make sure dataset contain exact zeros ones. also standardize predictors 0 mean standard deviation 1 facilitate model fit (ensure effect priors use multiple predictors). need specify number components mixture. use components number expected stable states stable state can modeled using multiple components (resulting e.g. wider basin). Since probability component mixture estimated, unnecessary components probability close zero effectively suppressed. select number components based Watanabe-Akaike information criterion (WAIC; Watanabe, 2013) running model different numbers components selecting one lowest WAIC. However, estimates WAIC sometimes unstable mixture models. conclusion, recommend using high number components ensure results affected adding excluding component. example, use 7 components. also limit number chains just 2 (illustration purposes) make fit quicker (following model fit can take hours).","code":"squeeze <- function(x) x * 0.98 + 0.01 datTC$treeCoverProp <- squeeze(datTC$treeCover / 100)  st <- function(x, y = x) (x - mean(y)) / sd(y) datTC$precipSt <- st(datTC$precip) datTC$tempSt <- st(datTC$temp)"},{"path":"https://adamklimes.github.io/mixglm/articles/mixglm.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Mixture models with *mixglm*","text":"package mixglm uses NIMBLE requires compiler Rtools.exe. installation instructions see: NIMBLE. install development version mixglm package GitHub use:","code":"# install.packages(\"remotes\") remotes::install_github(\"adamklimes/mixglm\")"},{"path":"https://adamklimes.github.io/mixglm/articles/mixglm.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Mixture models with *mixglm*","text":"mixglm uses Bayesian framework via NIMBLE fit mixtures regressions. provides flexibility specification regressions allowing mean, precision, probability dependent multiple predictors. supports normal, beta, gamma, negative binomial distributed response variables. Mixtures regressions can used various purposes. Mixture models can used semi-parametric way modelling variables unknown distribution (McLachlan & Peel, 2000). can used cluster analyses, resilience modelling (ecology) parametrization stability landscapes. mixglm package provides tools exploration results computations visualizations mixtures. tools usable mentioned purposes, described terminology resilience modelling vignette.","code":""},{"path":"https://adamklimes.github.io/mixglm/articles/mixglm.html","id":"mixglm-for-resilience-modelling","dir":"Articles","previous_headings":"Introduction","what":"mixglm for resilience modelling","title":"Mixture models with *mixglm*","text":"Resilience often illustrated using ball rolling curve, ball represents system rolls valley representing stable state. Due disturbance internal stochasticity, ball can pushed stable state. Resilience can defined either local non-local stability ball curve. slopes valley steep, system locally stable highly resilient (called engineering resilience). nearest hill (local maximum curve, tipping point) far system position, system stable also non-locally high ecological resilience (see review Dakos & Kéfi, 2022). stability curve can change shape along external predictors creating -called stability landscape (see Klimeš et al., 2024). Mixture regressions can used parametrize stability landscape. , stability curves predictor values interest can explored position instances system (e.g. observed ecological systems) along curves can evaluated. mixglm offers tools purposes, ranging stability landscape calculation visualization, depiction specified stability curves, calculation several metrics ecological resilience.","code":""},{"path":"https://adamklimes.github.io/mixglm/articles/mixglm.html","id":"fitting-mixture-models-using-mixglm","dir":"Articles","previous_headings":"","what":"Fitting mixture models using mixglm","title":"Mixture models with *mixglm*","text":"mixglm, possible fit mixtures predefined number components normal, beta, gamma, negative binomial distribution (components distribution). component, mean, precision, probability within mixture can defined dependent predictors can differ components (also mean, precision, probability sub-model). following present step--step guide fitting mixture model using mixglm.","code":""},{"path":"https://adamklimes.github.io/mixglm/articles/mixglm.html","id":"package-set-up-and-data-preparation","dir":"Articles","previous_headings":"Fitting mixture models using mixglm","what":"Package set-up and data preparation","title":"Mixture models with *mixglm*","text":"start loading mixglm package generating data example. generate two example variables, one representing precipitation gradient proxy ecosystem state - vegetation height. fully illustrate functionality mixglm, vegetation height multimodal distribution part precipitation gradient representing two alternative states.  generated auxiliary latent variable state describes two ecosystem states particular observation belongs. assumed vegetation height normally distributed parameters depending state.","code":"library(mixglm) #> Loading required package: nimble #> nimble version 1.3.0 is loaded. #> For more information on NIMBLE and a User Manual, #> please visit https://R-nimble.org. #>  #> Note for advanced users who have written their own MCMC samplers: #>   As of version 0.13.0, NIMBLE's protocol for handling posterior #>   predictive nodes has changed in a way that could affect user-defined #>   samplers in some situations. Please see Section 15.5.1 of the User Manual. #>  #> Attaching package: 'nimble' #> The following object is masked from 'package:stats': #>  #>     simulate #> The following object is masked from 'package:base': #>  #>     declare  st <- function(x, y = x) (x - mean(y)) / sd(y)  # standardization function  set.seed(10) n <- 300 state <- rbinom(n, 1, 0.5) precip <- runif(n, c(200, 600)[state + 1], c(1600, 2000)[state + 1]) vegHeight <- rnorm(n, c(1000, 2000)[state + 1], 100) precipSt <- st(precip) vegHeightSt <- st(vegHeight) dat <- data.frame(vegHeight, precip, vegHeightSt, precipSt)  plot(vegHeight ~ precip, data = dat, ylab = \"Vegetation height (cm)\")"},{"path":"https://adamklimes.github.io/mixglm/articles/mixglm.html","id":"fitting-the-mixture-model","dir":"Articles","previous_headings":"Fitting mixture models using mixglm","what":"Fitting the mixture model","title":"Mixture models with *mixglm*","text":"fit mixture model, must specify three sub-models. first sub-model (stateValModels) specifies mean values mixture components, second (statePrecModels) precision, third (stateProbModels) probability within mixture. specified formula predictors right side. resilience modelling, typically priori reasons differentiate predictors mixture components sub-models. means mean, precision, probability component can change along predictor (see ; one might want limit flexibility facilitate fit, especially modest datasets - e.g. constraining precision constant: statePrecModels = ~ 1). also need specify number components mixture (numStates). resilience modelling, number least correspond number hypothesized alternative stable states. However, multiple components can together represent one stable state, therefore advisable select higher number components. number components can determined using Watanabe-Akaike information criterion (WAIC; Watanabe, 2013) running model different numbers selecting model lowest WAIC. example, use just two components simplicity. also use standardized response variable predictor mean 0 standard deviation 1. Standardization recommended since facilitates model fitting (especially finding starting values sampler specification informative priors desired). also specify error distribution gaussian case. Fitting mixture models challenging. Various mixtures often fit data similarly well samplers can easily get stuck local optima. evaluate fit, e.g. coda package tools can used - illustrate plotting sampled values individual parameters. left, see sampled values specified parameter chain providing visual insights convergence right see posterior probability density parameter:  mixglm offers plot() function shows mean, standard deviation, probability component along one predictor. chain visualized separately default (byChains = TRUE), can also provide visual clues convergence.","code":"mod <- mixglm(   stateValModels = vegHeightSt ~ precipSt,   statePrecModels = ~ precipSt,   stateProbModels = ~ precipSt,   stateValError = \"gaussian\",   inputData = dat,   numStates = 2,   mcmcChains = 2,   setSeed = TRUE ) #> Defining model #> Building model #> Setting data and initial values #> Running calculate on model #>   [Note] Any error reports that follow may simply reflect missing values in model variables. #> Checking model sizes and dimensions #> ===== Monitors ===== #> thin = 1: intercept_statePrec, intercept_stateProb, intercept_stateVal, precipSt_statePrec, precipSt_stateProb, precipSt_stateVal #> ===== Samplers ===== #> RW sampler (10) #>   - precipSt_stateVal[]  (2 elements) #>   - intercept_stateVal[]  (2 elements) #>   - intercept_stateProb[]  (1 element) #>   - precipSt_stateProb[]  (1 element) #>   - intercept_statePrec[]  (2 elements) #>   - precipSt_statePrec[]  (2 elements) #> Compiling #>   [Note] This may take a minute. #>   [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details. #> running chain 1... #> |-------------|-------------|-------------|-------------| #> |-------------------------------------------------------| #> running chain 2... #> |-------------|-------------|-------------|-------------| #> |-------------------------------------------------------| #>   [Warning] There are 1 individual pWAIC values that are greater than 0.4. This may indicate that the WAIC estimate is unstable (Vehtari et al., 2017), at least in cases without grouping of data nodes or multivariate data nodes. plot(mod$mcmcSamples$samples[, \"intercept_statePrec[1]\"]) plot(mod)"},{"path":"https://adamklimes.github.io/mixglm/articles/mixglm.html","id":"model-specifications","dir":"Articles","previous_headings":"Fitting mixture models using mixglm","what":"Model specifications","title":"Mixture models with *mixglm*","text":"mixglm allows different predictors individual components. sub-model (stateValModels / statePrecModels / stateProbModels), can provide list formulas formula used one component. can used e.g. explore model behavior test specific hypotheses. Priors can specified using setPriors argument. takes list three named lists, one sub-model. can specify priors intercept parameters priors slope parameters. int1 denotes intercept first component int2 denotes intercept components. show several examples setting priors: mixglm() function six arguments control MCMC run. Arguments mcmcIters, mcmcBurnin, mcmcChains, mcmcThin can used set number iterations MCMC chain, number initial iterations discarded, number MCMC chains, thinning interval respectively. setSeed sets R’s random number seed. argument setInit can used specify starting values sampler. can useful exploration parameter space ensure valid starting values. Initial values model can accessed mod$initialValues.","code":"statePrecModels <- list(~ precipSt, ~ 1) # precision of 2. component is constant # Full specification of priors setPriors <- list(                  stateVal = list(             # dnorm(mean, tau) parametrization is used     int1 = \"dnorm(0.0, 0.01)\", #   by default, where sd = 1 / sqrt(tau)       int2 = \"dgamma(1.0, 1.0)\", # dgamma(shape, rate) parametrization is used     pred = \"dnorm(0.0, 0.01)\"),    stateProb = list(     int2 = \"dnorm(0.0, sd = 10.0)\",  # alternative parametrization can be used     pred = \"dnorm(0.0, 0.01)\"),   statePrec = list(     int = \"dnorm(0.0, 0.01)\",     pred = \"dnorm(0.0, 0.01)\"))  # Specification of priors for regression slope (effect of predictors on mean #   value of each component). All unspecified priors are set to defaults.  setPriors <- list(                  stateVal = list(     pred = \"dnorm(0.0, 0.1)\"))  # Specification of all intercept priors. All unspecified priors are set to  #   defaults.  setPriors <- list(                  stateVal = list(                  int1 = \"dnorm(5.0, 1.0)\",       int2 = \"dbeta(1.0, 20.0)\"),   stateProb = list(                  int2 = \"dnorm(0.0, 0.1)\"),    statePrec = list(                 int = \"dnorm(0.0, 0.1)\"))"},{"path":"https://adamklimes.github.io/mixglm/articles/mixglm.html","id":"results","dir":"Articles","previous_headings":"Fitting mixture models using mixglm","what":"Results","title":"Mixture models with *mixglm*","text":"addition plot() function visualizes individual components along predictor, mixglm offers several functions accessing plotting results.","code":""},{"path":"https://adamklimes.github.io/mixglm/articles/mixglm.html","id":"accessing-results","dir":"Articles","previous_headings":"Fitting mixture models using mixglm > Results","what":"Accessing results","title":"Mixture models with *mixglm*","text":"Calling model object (mod case) prints WAIC posterior mean values parameters. values can accessed using coef() function. detailed overview, summary() function also provides standard deviation, 2.5, 25, 75, 97.5 percentiles posterior distribution parameter. Using argument byChains = TRUE, obtain summary separately chain. summary() function two useful arguments. Intercepts mean values components mixglm always modeled sum intercept parameters lower rank (combination positive priors intercept parameters rank > 1, ensure identifiability model). Therefore, intercept parameters stateVal sub-model represent intercepts individual components (cumulative sum ). get intercepts individual components, set parameter absInt = TRUE. Finally, argument randomSample can used take random samples parameters posterior distributions.","code":"summary(mod, absInt = TRUE) #> [[1]] #>                           mean     sd    2.5%     25%     75%   97.5% #> intercept_statePrec[1]  3.1693 0.1319  2.8972  3.0834  3.2639  3.4116 #> intercept_statePrec[2]  2.8808 0.1331  2.6087  2.7954  2.9721  3.1294 #> intercept_stateProb[1]      NA     NA  0.0000  0.0000  0.0000  0.0000 #> intercept_stateProb[2]  0.0292 0.1291 -0.2240 -0.0626  0.1205  0.2756 #> intercept_stateVal[1]  -0.9946 0.0185 -1.0291 -1.0074 -0.9819 -0.9558 #> intercept_stateVal[2]   0.9640 0.0228  0.9198  0.9485  0.9795  1.0087 #> precipSt_statePrec[1]   0.0269 0.1348 -0.2439 -0.0645  0.1174  0.2869 #> precipSt_statePrec[2]   0.1445 0.1427 -0.1329  0.0442  0.2389  0.4282 #> precipSt_stateProb[1]       NA     NA  0.0000  0.0000  0.0000  0.0000 #> precipSt_stateProb[2]   1.0937 0.1496  0.8054  0.9944  1.1942  1.3847 #> precipSt_stateVal[1]   -0.0148 0.0189 -0.0521 -0.0274 -0.0022  0.0220 #> precipSt_stateVal[2]   -0.0029 0.0222 -0.0466 -0.0180  0.0120  0.0403"},{"path":"https://adamklimes.github.io/mixglm/articles/mixglm.html","id":"plotting-results","dir":"Articles","previous_headings":"Fitting mixture models using mixglm > Results","what":"Plotting results","title":"Mixture models with *mixglm*","text":"mixglm two functions visualize resulting mixture distributions. function landscapeMixglm() shows heatplot presentation fitted mixture reddish colours denoting high probability density (resilience modelling called stability landscape). plots probability density scaled range 0 1 highlights local maxima (suggesting stable states resilience modelling; blue default) local minima (tipping points; red default).  case multiple predictors, argument form can used specify predictor visualize horizontal axis, argument otherPreds specify values predictors visualized. aware (ordinary multiple regression) multiple predictors, observations (black points) projected visualized plane thus used assess fit model data. Often resulting mixture small local minima maxima represent major peaks probability density function. minima maxima probability density interest (resilience modelling), useful set threshold consider major bumps probability density function actual minima/maxima. argument threshold can used denote minima/maxima differ scaled probability density least specified value.  argument randomSample landscapeMixglm() function can used assess uncertainty results. specifies many random samples posterior distribution taken. samples, probability density mixture evaluated standard deviation evaluations plotted alongside local minima maxima . computations can take time, thus illustrate using just 3 samples:  second plotting function sliceMixglm(). can understood vertical slice plot landscapeMixglm() plot() functions. shows probability density given predictor value (argument value; resilience modelling called stability curve). also highlights mean mixture component (default using colours plot() function). plot() function, sliceMixglm() argument byChains (default TRUE) showing probability density mean mixtures chain (thus highlighting improper convergence chains).  argument addEcos can used include observations similar predictor values (differing ecosTol, default 0.1).  argument randomSample used instead posterior mean take plot random samples posterior distributions parameters.","code":"landscapeMixglm(mod, axes = FALSE, xlab = \"Precipitation (mm/yr)\",    ylab = \"Vegetation height (cm)\") axis(1, labels = 1:3*500, at = st(1:3*500, precip))    # non-standardized  axis(2, labels = 1:4*500, at = st(1:4*500, vegHeight)) #   values on axes landscapeMixglm(mod, threshold = 0.3) landscapeMixglm(mod, threshold = 0.3, randomSample = 3) sliceMixglm(mod, value = 0.5) # precipSt == 0.5 sliceMixglm(mod, value = 0.5, addEcos = TRUE, ecosTol = 0.3)"},{"path":"https://adamklimes.github.io/mixglm/articles/mixglm.html","id":"predictions","dir":"Articles","previous_headings":"Fitting mixture models using mixglm","what":"Predictions","title":"Mixture models with *mixglm*","text":"predict scaled probability density mixture specific predictor values obtain local minima/maxima values, mixglm functionpredict(). providing predictor values named data.frame newdata argument, get list probCurves item stores scaled probability density predictor value along response variable (response variable values stored item sampledResp). Item tipStable provides data.frame provided predictor value local minima (state == 0) maxima (state == 1) probability density. pass user defined threshold (specified threshold argument) marked catSt == 1. scaled probability density local minima maxima response values also provided.","code":"pred <- predict(mod, newdata = data.frame(precipSt = c(-1.5,0,1.5),    vegHeightSt = c(1, 1, 1)), threshold = 0.3)  # we can e.g. produce plots similar to sliceMixglm() plot(pred$probCurves$X1 ~ pred$sampledResp, type = \"l\")  # we add highlighting of local minima/maxima and if they reach the threshold tipStable1 <- pred$tipStable[[1]] cols <- c(\"red\", \"blue\") points(tipStable1$resp, tipStable1$probDens, col = cols[tipStable1$state + 1],  pch = c(1, 16)[tipStable1$catSt + 1])"},{"path":"https://adamklimes.github.io/mixglm/articles/mixglm.html","id":"resilience-measures","dir":"Articles","previous_headings":"Fitting mixture models using mixglm","what":"Resilience measures","title":"Mixture models with *mixglm*","text":"function predict() also allows calculation several resilience measures. Potential energy (potentEn) scaled probability density observation. distToState distance closest stable state (local maxima probability density) taking threshold account. Distance units response variable can understood vertical distance observation blue line landscapeMixglm() figure. observations tipping points stability curve (local minima probability density), distance closest tipping point (distToTip) potential depth (potentialDepth) provided. Potential depth difference potential energy observation closest tipping point.","code":"# prediction for the original (modeled) data can be done by omitting the  #   argument `newdata` predOrig <- predict(mod, threshold = 0.3)  par(mfrow = c(2,2))                        plot(dat$precip, dat$vegHeight, cex = predOrig$obsDat$potentEn * 2,    main = \"Potential energy\") plot(dat$precip, dat$vegHeight, cex = predOrig$obsDat$distToState * 4,    main = \"Distance to stable state\") plot(dat$precip, dat$vegHeight, cex = predOrig$obsDat$distToTip,    main = \"Distance to tipping point\") plot(dat$precip, dat$vegHeight, cex = predOrig$obsDat$potentialDepth * 1.5,    main = \"Potential depth\")"},{"path":"https://adamklimes.github.io/mixglm/articles/mixglm.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Mixture models with *mixglm*","text":"↑ Dakos, V., Kéfi, S., 2022. Ecological resilience: measure . Environmental Research Letters 17: 043003. doi.org/10.1088/1748-9326/ac5767↑ Klimeš, ., Chipperfield, J., Töpper, Macias-Fauria, J., Spiegel, M., Vandvik, V., Velle, L. G., Seddon, . [mixglm]: tool modelling ecosystem resilience. bioRxiv. doi.org/10.1101/2024.03.23.586419↑ McLachlan, G., Peel, D., 2000. Finite Mixture Models. Wiley-Interscience Publication. John Wiley & Sons, Inc. ISBN 0-471-00626-2↑ Watanabe, S. 2013. widely applicable bayesian information criterion. Journal Machine Learning Research 14: 867–897. Link","code":""},{"path":"https://adamklimes.github.io/mixglm/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adam Klimes. Maintainer.","code":""},{"path":"https://adamklimes.github.io/mixglm/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Adam Klimeš, Joseph Daniel Chipperfield, Joachim Paul Töpper, Marc Macias-Fauria, Marcus Spiegel, Vigdis Vandvik, Liv Guri Velle, Alistair William Robin Seddon (2025). mixglm: R package estimation stable states, tipping points, ecosystem resilience using mixture models (Ecography; https://doi.org/10.1002/ecog.08148)","code":"@Article{,   title = {mixglm: An R package for estimation of stable states, tipping points, and ecosystem resilience using mixture models},   author = {Adam Klimeš and Joseph Daniel Chipperfield and Joachim Paul Töpper and Marc Macias-Fauria and Marcus Spiegel and Vigdis Vandvik and Liv Guri Velle and Alistair William Robin Seddon},   journal = {Ecography},   year = {2025},   url = {https://doi.org/10.1002/ecog.08148}, }"},{"path":"https://adamklimes.github.io/mixglm/index.html","id":"mixglm-","dir":"","previous_headings":"","what":"Mixture models","title":"Mixture models","text":"R package mixtures generalized linear models tools estimate ecosystem resilience stable states using models","code":""},{"path":"https://adamklimes.github.io/mixglm/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Mixture models","text":"Package mixglm uses NIMBLE requires compiler Rtools.exe, installation instructions see: NIMBLE. install development version mixglm package GitHub use:","code":"# install.packages(\"remotes\") remotes::install_github(\"adamklimes/mixglm\")"},{"path":"https://adamklimes.github.io/mixglm/reference/checkInit.html","id":null,"dir":"Reference","previous_headings":"","what":"Check initial values for mixglm and generate new ones if necessary — checkInit","title":"Check initial values for mixglm and generate new ones if necessary — checkInit","text":"function checks initial values mixglm illegitimate, tries generate new ones.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/checkInit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check initial values for mixglm and generate new ones if necessary — checkInit","text":"","code":"checkInit(   stateValModels,   statePrecModels,   inputData,   setInit,   errorModel,   linkFunction,   Nstates,   genNew = FALSE,   genFn = function(x) rnorm(1, 0, 2),   checkForSimulation = FALSE )"},{"path":"https://adamklimes.github.io/mixglm/reference/checkInit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check initial values for mixglm and generate new ones if necessary — checkInit","text":"stateValModels formula describing regression relationship mean response variable covariates mixture components, list formulas element giving regression relationship mean response variable covariates mixture component (ordered according intercept mixture component y-axis).  response variable must given left-hand side formula. statePrecModels formula describing regression relationship variances mixture components covariates, list formulas mixture component giving regression relationship variance mixture component covariates mixture component (ordered according intercept mixture component y-axis). inputData data frame containing covariate information. setInit List initial values. assumed parameter, vector initial values length corresponding Nstates errorModel string specifying error distribution used mixglm. can : \"gaussian\", \"gamma\", \"beta\" \"negbinomial\". linkFunction string specifying link function. can : \"identity\", \"log\", \"logit\", \"probit\", \"cloglog\". Nstates integer specifying number components mixture. genNew logical value specifying new initial values generated even setInit contains legitimate values. genFn function used generate new initial values. one argument component rank return one value. Absolute value provided function used initial value intercept mean components apart first one. Note intercept precision beta distribution, genFn(x) + 6 used. checkForSimulation logical value specifying check initial values done. Mainly internal use.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/checkInit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check initial values for mixglm and generate new ones if necessary — checkInit","text":"list initial values","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/checkInit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check initial values for mixglm and generate new ones if necessary — checkInit","text":"Adam Klimes","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/coef.mixglm.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract model coefficients from a mixture model — coef.mixglm","title":"Extract model coefficients from a mixture model — coef.mixglm","text":"Posterior mean values mixglm","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/coef.mixglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract model coefficients from a mixture model — coef.mixglm","text":"","code":"# S3 method for class 'mixglm' coef(object, digit = NULL, ...)"},{"path":"https://adamklimes.github.io/mixglm/reference/coef.mixglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract model coefficients from a mixture model — coef.mixglm","text":"object object class \"mixglm\" digit integer specifying number decimal places used. Use \"NULL\" rounding. ... arguments passed methods.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/coef.mixglm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract model coefficients from a mixture model — coef.mixglm","text":"List matrices posterior mean values parameter","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/coef.mixglm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract model coefficients from a mixture model — coef.mixglm","text":"Adam Klimes","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/dbetaStateValueMembership.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability Density of a response variable from beta mixture (Beta Error) — dbetaStateValueMembership","title":"Probability Density of a response variable from beta mixture (Beta Error) — dbetaStateValueMembership","text":"Calculate probability density response variable beta mixture.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/dbetaStateValueMembership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability Density of a response variable from beta mixture (Beta Error) — dbetaStateValueMembership","text":"","code":"dbetaStateValueMembership(x, stateVal, statePrec, stateProb, log = 0)"},{"path":"https://adamklimes.github.io/mixglm/reference/dbetaStateValueMembership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability Density of a response variable from beta mixture (Beta Error) — dbetaStateValueMembership","text":"x scalar value containing value response variable stateVal numeric vector containing mean values mixture components statePrec numeric vector containing precision (reciprocal variance) mixture components stateProb numeric vector containing probabilities belonging mixture component (internally normalised one) log TRUE return log density","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/dbetaStateValueMembership.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability Density of a response variable from beta mixture (Beta Error) — dbetaStateValueMembership","text":"scalar containing probability density","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/dbetaStateValueMembership.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Probability Density of a response variable from beta mixture (Beta Error) — dbetaStateValueMembership","text":"Joseph D. Chipperfield, joechip90@googlemail.com","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/dgammaStateValueMembership.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability Density of a response variable from gamma mixture (Gamma Error) — dgammaStateValueMembership","title":"Probability Density of a response variable from gamma mixture (Gamma Error) — dgammaStateValueMembership","text":"Calculate probability density response variable gamma mixture.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/dgammaStateValueMembership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability Density of a response variable from gamma mixture (Gamma Error) — dgammaStateValueMembership","text":"","code":"dgammaStateValueMembership(x, stateVal, statePrec, stateProb, log = 0)"},{"path":"https://adamklimes.github.io/mixglm/reference/dgammaStateValueMembership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability Density of a response variable from gamma mixture (Gamma Error) — dgammaStateValueMembership","text":"x scalar value containing value response variable stateVal numeric vector containing mean values mixture components statePrec numeric vector containing precision (reciprocal variance) mixture components stateProb numeric vector containing probabilities belonging mixture component (internally normalised one) log TRUE return log density","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/dgammaStateValueMembership.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability Density of a response variable from gamma mixture (Gamma Error) — dgammaStateValueMembership","text":"scalar containing probability density","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/dgammaStateValueMembership.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Probability Density of a response variable from gamma mixture (Gamma Error) — dgammaStateValueMembership","text":"Joseph D. Chipperfield, joechip90@googlemail.com","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/dnegbinStateValueMembership.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability Density of a response variable from negative binomial mixture (Negative Binomial Error) — dnegbinStateValueMembership","title":"Probability Density of a response variable from negative binomial mixture (Negative Binomial Error) — dnegbinStateValueMembership","text":"Calculate probability density response variable negative binomial mixture.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/dnegbinStateValueMembership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability Density of a response variable from negative binomial mixture (Negative Binomial Error) — dnegbinStateValueMembership","text":"","code":"dnegbinStateValueMembership(x, stateVal, statePrec, stateProb, log = 0)"},{"path":"https://adamklimes.github.io/mixglm/reference/dnegbinStateValueMembership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability Density of a response variable from negative binomial mixture (Negative Binomial Error) — dnegbinStateValueMembership","text":"x scalar value containing value response variable stateVal numeric vector containing mean values mixture components statePrec numeric vector containing precision (reciprocal variance) mixture components stateProb numeric vector containing probabilities belonging mixture component (internally normalised one) log TRUE return log density","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/dnegbinStateValueMembership.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability Density of a response variable from negative binomial mixture (Negative Binomial Error) — dnegbinStateValueMembership","text":"scalar containing probability density","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/dnegbinStateValueMembership.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Probability Density of a response variable from negative binomial mixture (Negative Binomial Error) — dnegbinStateValueMembership","text":"Joseph D. Chipperfield, joechip90@googlemail.com","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/dnormStateValueMembership.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability Density of a response variable from Gaussian mixture (Normal Error) — dnormStateValueMembership","title":"Probability Density of a response variable from Gaussian mixture (Normal Error) — dnormStateValueMembership","text":"Calculate probability density response variable Gaussian mixture.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/dnormStateValueMembership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability Density of a response variable from Gaussian mixture (Normal Error) — dnormStateValueMembership","text":"","code":"dnormStateValueMembership(x, stateVal, statePrec, stateProb, log = 0)"},{"path":"https://adamklimes.github.io/mixglm/reference/dnormStateValueMembership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability Density of a response variable from Gaussian mixture (Normal Error) — dnormStateValueMembership","text":"x scalar value containing value response variable stateVal numeric vector containing mean values mixture components statePrec numeric vector containing precision (reciprocal variance) mixture components stateProb numeric vector containing probabilities belonging mixture component (internally normalised one) log TRUE return log density","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/dnormStateValueMembership.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability Density of a response variable from Gaussian mixture (Normal Error) — dnormStateValueMembership","text":"scalar containing probability density","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/dnormStateValueMembership.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Probability Density of a response variable from Gaussian mixture (Normal Error) — dnormStateValueMembership","text":"Joseph D. Chipperfield, joechip90@googlemail.com","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/findMin.html","id":null,"dir":"Reference","previous_headings":"","what":"Find positions of local minima in a vector — findMin","title":"Find positions of local minima in a vector — findMin","text":"Finds position local minima vector including start   end point. flat minima (identical subsequent values), denotes middle point","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/findMin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find positions of local minima in a vector — findMin","text":"","code":"findMin(x, extremes = TRUE)"},{"path":"https://adamklimes.github.io/mixglm/reference/findMin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find positions of local minima in a vector — findMin","text":"x numeric vector extremes logical indicating first last values considered","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/findMin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find positions of local minima in a vector — findMin","text":"vector positions minima x","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/findMin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find positions of local minima in a vector — findMin","text":"Adam Klimes","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/getMinMax.html","id":null,"dir":"Reference","previous_headings":"","what":"Find local minima and maxima in mixglm — getMinMax","title":"Find local minima and maxima in mixglm — getMinMax","text":"Finds local minima maxima slices stability landscape   mixglm represent multimodality   specified threshold.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/getMinMax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find local minima and maxima in mixglm — getMinMax","text":"","code":"getMinMax(slices, threshold = 0)"},{"path":"https://adamklimes.github.io/mixglm/reference/getMinMax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find local minima and maxima in mixglm — getMinMax","text":"slices slices stability landscape sliceMixglm() function threshold numerical value specifying threshold marking minima maxima. Marked maxima/minima differ scaled probability density threshold value.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/getMinMax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find local minima and maxima in mixglm — getMinMax","text":"list containing following components: tipStable list lists dataframes   tipping points (state == 0) stable states (state == 1), categorized   based satifying threshold (catSt == 1), scaled [0-1]   probability density response variable value mats array stability landscapes matsSt list scaled stability landscapes","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/getMinMax.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find local minima and maxima in mixglm — getMinMax","text":"Adam Klimes","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/landscapeMixglm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot stability landscape from a mixture model — landscapeMixglm","title":"Plot stability landscape from a mixture model — landscapeMixglm","text":"function plots stability landscape given predictor","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/landscapeMixglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot stability landscape from a mixture model — landscapeMixglm","text":"","code":"landscapeMixglm(   mod,   form = NULL,   threshold = 0,   addPoints = TRUE,   addMinMax = TRUE,   randomSample = NULL,   otherPreds = NULL,   eqiCol = c(\"blue\", \"red\"),   ... )"},{"path":"https://adamklimes.github.io/mixglm/reference/landscapeMixglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot stability landscape from a mixture model — landscapeMixglm","text":"mod object class \"mixglm\" form formula one predictor specifying variables plot threshold numerical value denoting minimum relative importance visualized stable states tipping points addPoints logical value indicating observations visualized addMinMax logical value indicating stable states tipping points visualized randomSample integer specifying many random samples posterior distribution take instead mean. Use \"NULL\" mean. Plots instead standard deviation probability density samples. otherPreds named vector values predictors specified form. Default zeros eqiCol vector colors length 2 specifying colors stable states tipping points respectively ... parameters passed image","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/landscapeMixglm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot stability landscape from a mixture model — landscapeMixglm","text":"Returns invisibly list scaled probability density matrix (randomSample).","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/landscapeMixglm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot stability landscape from a mixture model — landscapeMixglm","text":"Adam Klimes","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/landscapeMixglm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot stability landscape from a mixture model — landscapeMixglm","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(10) n <- 200 x <- rnorm(n) group <- rbinom(n, 1, 0.5) y <- rnorm(n, 1 + 0.5 * x * c(-1, 1)[group + 1], 0.1) plot(y ~ x) dat <- data.frame(x, y)  mod <- mixglm(   stateValModels = y ~ x,   stateProbModels = ~ x,   statePrecModels = ~ x,   inputData = dat,   numStates = 2) landscapeMixglm(mod)  # uncertainty and stable states and tipping points for random samples landscapeMixglm(mod, randomSample = 10)} # }"},{"path":"https://adamklimes.github.io/mixglm/reference/mixglm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit the mixture model — mixglm","title":"Fit the mixture model — mixglm","text":"function takes set model specifications three sub-models mixture model fits data set.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/mixglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit the mixture model — mixglm","text":"","code":"mixglm(   stateValModels,   stateProbModels,   statePrecModels,   inputData,   numStates = NULL,   stateValError = gaussian,   mcmcIters = 10000,   mcmcBurnin = 5000,   mcmcChains = 4,   mcmcThin = 1,   setPriors = list(stateVal = list(int1 = \"dnorm(0.0, 0.001)\", int2 = \"dgamma(1.0, 0.5)\",     pred = \"dnorm(0.0, 0.001)\"), stateProb = list(int2 = \"dnorm(0.0, 0.001)\", pred =     \"dnorm(0.0, 0.001)\"), statePrec = list(int = \"dnorm(0.0, 0.001)\", pred =     \"dnorm(0.0, 0.001)\")),   setInit = NULL,   setSeed = FALSE,   verbose = TRUE,   mixglmSpecif = NULL )"},{"path":"https://adamklimes.github.io/mixglm/reference/mixglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit the mixture model — mixglm","text":"stateValModels formula describing regression relationship mean response variable covariates mixture components, list formulas element giving regression relationship mean response variable covariates mixture component (ordered according intercept mixture component y-axis).  response variable must given left-hand side formula. stateProbModels formula describing regression relationship probability existence mixture components covariates, list formulas element giving regression relationship probability existence mixture component covariates (ordered according intercept mixture component y-axis). statePrecModels formula describing regression relationship variances mixture components covariates, list formulas mixture component giving regression relationship variance mixture component covariates mixture component (ordered according intercept mixture component y-axis). inputData data frame containing covariate information response variable. numStates integer scalar containing number components mixture. stateValModels, stateProbModels, statePrecModels parameters list numStates can omitted therefore set length list. stateValError description error distribution link function used mixture model.  can family specification character scalar following possible values: \"gaussian\", \"gamma\", \"beta\", \"negbinomial\". mcmcIters integer scalar providing number post-burn-samples draw MCMC sampler (per chain). mcmcBurnin integer scalar providing number MCMC samples use adaption burn-portion process (per chain). mcmcChains integer scalar giving number MCMC chains use. mcmcThin integer scalar giving thinning frequency MCMC chains.  example, value 4 results every fourth values retained. setPriors named list prior distributions. Distribution specified using character strings. sublists provided, values list distributed sublist items allowing specify several priors . Sublist items \"int\", specification priors intercept parameters, \"pred\", specification priors predictor parameters. \"int\" followed \"1\" \"2\" marking priors first intercept intercepts respectively. full structure list see default values. Prior \"stateVal$Int2\" allow positive values ensure distinctness mixture components. setInit list initial values overwrites generated ones. setSeed logical numeric argument passed runMCMC. \"TRUE\" numeric, R's random number seed set onset MCMC chain. verbose logical value specifying NIMBLE messages printed. mixglmSpecif Output \"mixglmSpecification()\". Mainly development.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/mixglm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit the mixture model — mixglm","text":"list containing following components: mcmcSamples mcmc object mcmcChains == 1 mcmc.list object mcmcChains > 1 containing sampled values compiledModel R interface object containing interface compiled NIMBLE model. output compileNimble function applied model object modelText character scalar containing text model specification NIMBLE BUGS dialect modelCode nimbleCode object containing model specification constants list containing constants provided NIMBLE data list containing data provided NIMBLE errorModel factor containing error model used specification error distribution response variable linkFunction factor containing link function used specification mixture model initialValues list containing potential initial values used stochastic nodes NIMBLE model specification","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/mixglm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fit the mixture model — mixglm","text":"Joseph D. Chipperfield joechip90@googlemail.com, Adam Klimes","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/mixglm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit the mixture model — mixglm","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(10) n <- 200 x <- rnorm(n) group <- rbinom(n, 1, 0.5) y <- rnorm(n, 1 + 0.5 * x * c(-1, 1)[group + 1], 0.1) plot(y ~ x) dat <- data.frame(x, y)  mod <- mixglm(   stateValModels = y ~ x,   stateProbModels = ~ x,   statePrecModels = ~ x,   inputData = dat,   numStates = 2) plot(mod)} # }"},{"path":"https://adamklimes.github.io/mixglm/reference/mixglmSimulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Instances of a mixture model — mixglmSimulation","title":"Simulate Instances of a mixture model — mixglmSimulation","text":"function takes set model specifications three sub-models mixture model generates simulation model specification","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/mixglmSimulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Instances of a mixture model — mixglmSimulation","text":"","code":"mixglmSimulation(   numSims,   stateValModels,   stateProbModels,   statePrecModels,   inputData,   numStates = NULL,   stateValError = gaussian,   coefficientValues = NULL )"},{"path":"https://adamklimes.github.io/mixglm/reference/mixglmSimulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Instances of a mixture model — mixglmSimulation","text":"numSims number simulations draw mixture model. stateValModels formula describing regression relationship mean response variable covariates mixture components, list formulas element giving regression relationship mean response variable covariates mixture component (ordered according intercept mixture component y-axis).  response variable must given left-hand side formula. stateProbModels formula describing regression relationship probability existence mixture components covariates, list formulas element giving regression relationship probability existence mixture component covariates (ordered according intercept mixture component y-axis). statePrecModels formula describing regression relationship variances mixture components covariates, list formulas mixture component giving regression relationship variance mixture component covariates mixture component (ordered according intercept mixture component y-axis). inputData data frame containing covariate information response variable. numStates integer scalar containing number components mixture. stateValModels, stateProbModels, statePrecModels parameters list numStates can omitted therefore set length list. stateValError description error distribution link function used model describing ecosystem state value.  can family specification character scalar following possible values: \"gaussian\", \"gamma\", \"beta\", \"negbinomial\". coefficientValues list containing values coefficients use simulation.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/mixglmSimulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Instances of a mixture model — mixglmSimulation","text":"list containg vector simulated values stochastic node.  addition following elements appended list: linStateVal matrix containing predicted response variable values row input covariate data.frame.  column represents predicted response variable value mixture component linStatePrec matrix containing predicted precision response variable row input covariate data.frame.  column represents predicted precision response variable value mixture component linStateProb matrix containing probability mixture component existing row input covariate data.frame.  column represents probability mixture component existing","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/mixglmSimulation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Instances of a mixture model — mixglmSimulation","text":"Used parametrization gamma, beta, negbinomial distribution using mean precision internally reparametrized typical shape rate parametrization gamma, two shape parameters beta, size probability parameters negbinomial. distributions, parameters constrained (e.g. shape parameters beta distribution positive). Consequently, combinations mean precision can used. Generally get legitimate coefficient values: Standardize predictors start low coefficient values (beta distribution, increase precision).","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/mixglmSimulation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate Instances of a mixture model — mixglmSimulation","text":"Joseph D. Chipperfield, joechip90@googlemail.com","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/mixglmSimulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Instances of a mixture model — mixglmSimulation","text":"","code":"{ dat <- data.frame(x = rnorm(200), y = rnorm(200)) cfValues <- list(   \"intercept_stateVal\" = c(-1.0, 0.5, 0.5),   \"x_stateVal\" = c(-0.05, 0.05, 0.1),   \"intercept_stateProb\" = c(NA, -1.0, 1.0),   \"intercept_statePrec\" = c(0.5, 1.0, 1.5)  )  mixglmSimulation(    numSims = 1,    stateValModels = y ~ x,    stateProbModels = ~ 1,    statePrecModels = ~ 1,    inputData = dat,    numStates = 2,    stateValError = gaussian,    coefficientValues = cfValues  ) } #> Defining model #> Building model #> Setting data and initial values #> Running calculate on model #>   [Note] Any error reports that follow may simply reflect missing values in model variables. #> Checking model sizes and dimensions #> $y #>                [,1] #>   [1,] -1.540332926 #>   [2,] -1.552510805 #>   [3,]  0.061055405 #>   [4,] -0.413153540 #>   [5,] -0.577510070 #>   [6,] -0.291855573 #>   [7,] -0.069579857 #>   [8,] -0.635539113 #>   [9,] -0.288837248 #>  [10,] -3.392129271 #>  [11,] -0.082946921 #>  [12,] -1.623224050 #>  [13,] -1.044544160 #>  [14,] -0.250840398 #>  [15,] -1.045139763 #>  [16,] -0.129806245 #>  [17,] -0.566100177 #>  [18,] -1.931530194 #>  [19,] -0.316501245 #>  [20,] -1.637602744 #>  [21,] -1.168441885 #>  [22,] -2.060794700 #>  [23,] -0.854671530 #>  [24,] -1.204630304 #>  [25,] -0.411399782 #>  [26,]  0.220513393 #>  [27,] -1.249394122 #>  [28,] -0.745659693 #>  [29,] -1.857314762 #>  [30,] -1.077649404 #>  [31,] -0.270741099 #>  [32,] -1.282676499 #>  [33,] -0.138113190 #>  [34,] -0.111537008 #>  [35,] -2.366603440 #>  [36,] -0.985179659 #>  [37,] -1.327301462 #>  [38,] -0.856413362 #>  [39,] -1.921900194 #>  [40,] -0.498261346 #>  [41,] -0.636508356 #>  [42,] -1.692390086 #>  [43,]  0.036355176 #>  [44,] -1.386378524 #>  [45,] -1.786636227 #>  [46,] -0.199320523 #>  [47,] -0.397059571 #>  [48,] -0.535025361 #>  [49,] -1.732419991 #>  [50,]  0.170172696 #>  [51,] -1.044735066 #>  [52,] -0.419867224 #>  [53,] -1.003806949 #>  [54,] -0.836027440 #>  [55,] -1.862384962 #>  [56,] -2.080593924 #>  [57,] -0.665059914 #>  [58,] -1.104462434 #>  [59,]  0.998762212 #>  [60,]  0.006434390 #>  [61,] -1.161553433 #>  [62,] -0.714389389 #>  [63,] -1.497291060 #>  [64,] -1.084262411 #>  [65,] -0.424204441 #>  [66,] -0.252295884 #>  [67,]  0.134273586 #>  [68,]  1.141173716 #>  [69,] -1.364506511 #>  [70,] -1.221370017 #>  [71,] -1.362197304 #>  [72,] -0.385775643 #>  [73,] -0.532044123 #>  [74,] -1.599468350 #>  [75,] -1.669801678 #>  [76,] -0.157671356 #>  [77,] -1.243351727 #>  [78,] -0.368954807 #>  [79,] -1.489157692 #>  [80,] -1.646757068 #>  [81,] -0.722503123 #>  [82,] -0.835074452 #>  [83,] -0.136466310 #>  [84,] -0.305535444 #>  [85,] -1.142076540 #>  [86,] -0.344429090 #>  [87,] -0.673849748 #>  [88,] -1.086492888 #>  [89,] -1.091821166 #>  [90,] -1.221146583 #>  [91,] -0.819594023 #>  [92,] -0.107837892 #>  [93,]  0.494216249 #>  [94,] -1.592580669 #>  [95,] -1.005269045 #>  [96,] -0.222493616 #>  [97,] -0.404194894 #>  [98,] -0.898347569 #>  [99,]  0.338996765 #> [100,] -1.448637544 #> [101,]  0.342499559 #> [102,] -2.244575623 #> [103,] -0.371980819 #> [104,] -1.776151536 #> [105,] -0.648591808 #> [106,] -0.592450756 #> [107,] -0.350463385 #> [108,] -2.044774903 #> [109,] -0.106101915 #> [110,]  0.007825212 #> [111,] -1.088117925 #> [112,] -1.724698730 #> [113,] -1.311444796 #> [114,] -0.798212306 #> [115,]  0.289908330 #> [116,] -0.882496637 #> [117,] -1.352057069 #> [118,] -0.505479646 #> [119,]  0.335098907 #> [120,] -1.470596817 #> [121,] -0.209087438 #> [122,] -1.047178611 #> [123,] -0.452049556 #> [124,] -1.115102274 #> [125,] -0.403574449 #> [126,] -0.390381096 #> [127,] -0.506535184 #> [128,] -0.452860604 #> [129,] -3.458903384 #> [130,] -1.398382147 #> [131,] -1.933545456 #> [132,] -0.581388106 #> [133,] -0.389226214 #> [134,] -1.909285747 #> [135,]  0.230928030 #> [136,] -1.381305075 #> [137,] -2.182922287 #> [138,]  0.048959630 #> [139,] -0.595523729 #> [140,] -2.200917654 #> [141,] -0.086244112 #> [142,]  0.217217573 #> [143,] -1.139248807 #> [144,] -1.794052423 #> [145,] -1.083875037 #> [146,] -1.313443394 #> [147,] -0.787750344 #> [148,] -1.882994794 #> [149,]  0.106777081 #> [150,] -0.260158736 #> [151,] -0.843539367 #> [152,] -2.171955810 #> [153,] -1.852070624 #> [154,] -0.385477582 #> [155,] -0.835823638 #> [156,] -0.928589326 #> [157,] -1.497147690 #> [158,] -0.729502368 #> [159,] -0.178995952 #> [160,] -0.268712766 #> [161,] -0.192565732 #> [162,] -0.636324645 #> [163,] -0.724326515 #> [164,] -0.382467083 #> [165,] -0.539508857 #> [166,] -0.569200355 #> [167,] -1.037804605 #> [168,]  0.114374268 #> [169,] -1.998737138 #> [170,] -1.164983944 #> [171,] -1.708440746 #> [172,] -0.918600050 #> [173,] -3.248055276 #> [174,] -2.674057664 #> [175,] -1.007108564 #> [176,] -1.488495220 #> [177,] -1.037732233 #> [178,] -1.440576254 #> [179,] -0.206626999 #> [180,] -2.195886954 #> [181,] -2.476149837 #> [182,] -1.614300647 #> [183,] -0.713034482 #> [184,]  0.695512813 #> [185,] -0.458539183 #> [186,] -0.417292591 #> [187,] -1.901354851 #> [188,] -1.622070952 #> [189,] -0.144351023 #> [190,] -2.135294748 #> [191,] -0.161683542 #> [192,] -0.773939711 #> [193,] -2.188339392 #> [194,] -0.323227349 #> [195,] -0.866485003 #> [196,] -0.440893517 #> [197,] -0.575607003 #> [198,] -1.473765848 #> [199,] -2.244032008 #> [200,] -0.648028548 #>  #> $linStateVal #>              [,1]       [,2] #>   [1,] -0.9997214 -0.5002786 #>   [2,] -1.0310776 -0.4689224 #>   [3,] -1.0574206 -0.4425794 #>   [4,] -0.9089091 -0.5910909 #>   [5,] -0.9876337 -0.5123663 #>   [6,] -0.9877900 -0.5122100 #>   [7,] -0.9858647 -0.5141353 #>   [8,] -0.9723150 -0.5276850 #>   [9,] -1.0314491 -0.4685509 #>  [10,] -1.1032512 -0.3967488 #>  [11,] -0.9184505 -0.5815495 #>  [12,] -1.0256213 -0.4743787 #>  [13,] -0.9068494 -0.5931506 #>  [14,] -0.9738994 -0.5261006 #>  [15,] -0.9973699 -0.5026301 #>  [16,] -1.0271498 -0.4728502 #>  [17,] -0.9542963 -0.5457037 #>  [18,] -1.0234077 -0.4765923 #>  [19,] -1.0181476 -0.4818524 #>  [20,] -0.9347728 -0.5652272 #>  [21,] -1.0368888 -0.4631112 #>  [22,] -1.0944252 -0.4055748 #>  [23,] -0.9951277 -0.5048723 #>  [24,] -0.9532076 -0.5467924 #>  [25,] -0.9992025 -0.5007975 #>  [26,] -0.9586606 -0.5413394 #>  [27,] -0.9243800 -0.5756200 #>  [28,] -1.0467682 -0.4532318 #>  [29,] -1.0088244 -0.4911756 #>  [30,] -1.0121843 -0.4878157 #>  [31,] -1.0811774 -0.4188226 #>  [32,] -1.0056019 -0.4943981 #>  [33,] -0.9933001 -0.5066999 #>  [34,] -0.9044956 -0.5955044 #>  [35,] -0.9860381 -0.5139619 #>  [36,] -0.9843277 -0.5156723 #>  [37,] -1.0533654 -0.4466346 #>  [38,] -1.0035017 -0.4964983 #>  [39,] -0.9680438 -0.5319562 #>  [40,] -0.9975018 -0.5024982 #>  [41,] -0.9874258 -0.5125742 #>  [42,] -1.0222399 -0.4777601 #>  [43,] -1.1377709 -0.3622291 #>  [44,] -1.0023266 -0.4976734 #>  [45,] -1.0288855 -0.4711145 #>  [46,] -1.0059097 -0.4940903 #>  [47,] -0.9044140 -0.5955860 #>  [48,] -1.0431043 -0.4568957 #>  [49,] -0.9878382 -0.5121618 #>  [50,] -0.9896956 -0.5103044 #>  [51,] -1.0009589 -0.4990411 #>  [52,] -1.0014780 -0.4985220 #>  [53,] -1.0274914 -0.4725086 #>  [54,] -0.8862943 -0.6137057 #>  [55,] -1.1341279 -0.3658721 #>  [56,] -0.9819389 -0.5180611 #>  [57,] -1.0106678 -0.4893322 #>  [58,] -1.0537173 -0.4462827 #>  [59,] -0.9667456 -0.5332544 #>  [60,] -1.0556976 -0.4443024 #>  [61,] -0.9877052 -0.5122948 #>  [62,] -0.9411218 -0.5588782 #>  [63,] -0.9512075 -0.5487925 #>  [64,] -1.0532529 -0.4467471 #>  [65,] -1.0065835 -0.4934165 #>  [66,] -1.0244314 -0.4755686 #>  [67,] -0.9150275 -0.5849725 #>  [68,] -0.9264632 -0.5735368 #>  [69,] -1.0142075 -0.4857925 #>  [70,] -1.0668660 -0.4331340 #>  [71,] -1.0118348 -0.4881652 #>  [72,] -1.0659147 -0.4340853 #>  [73,] -1.0261955 -0.4738045 #>  [74,] -1.0303374 -0.4696626 #>  [75,] -0.9945032 -0.5054968 #>  [76,] -1.0086091 -0.4913909 #>  [77,] -0.9954836 -0.5045164 #>  [78,] -1.0962172 -0.4037828 #>  [79,] -1.0649196 -0.4350804 #>  [80,] -1.0374396 -0.4625604 #>  [81,] -1.0278112 -0.4721888 #>  [82,] -0.9725871 -0.5274129 #>  [83,] -1.0555267 -0.4444733 #>  [84,] -0.8693833 -0.6306167 #>  [85,] -0.9922153 -0.5077847 #>  [86,] -1.0216945 -0.4783055 #>  [87,] -0.9809024 -0.5190976 #>  [88,] -1.0212094 -0.4787906 #>  [89,] -1.0531551 -0.4468449 #>  [90,] -1.0524356 -0.4475644 #>  [91,] -0.9980949 -0.5019051 #>  [92,] -1.0243074 -0.4756926 #>  [93,] -1.0836441 -0.4163559 #>  [94,] -0.9822819 -0.5177181 #>  [95,] -1.0473174 -0.4526826 #>  [96,] -1.0658413 -0.4341587 #>  [97,] -0.9851680 -0.5148320 #>  [98,] -0.9806393 -0.5193607 #>  [99,] -0.9607284 -0.5392716 #> [100,] -0.9471632 -0.5528368 #> [101,] -0.9602229 -0.5397771 #> [102,] -0.9121862 -0.5878138 #> [103,] -0.9654731 -0.5345269 #> [104,] -0.9720729 -0.5279271 #> [105,] -0.9731668 -0.5268332 #> [106,] -1.0113564 -0.4886436 #> [107,] -1.0489227 -0.4510773 #> [108,] -0.9895559 -0.5104441 #> [109,] -0.9300295 -0.5699705 #> [110,] -1.0129269 -0.4870731 #> [111,] -0.9779100 -0.5220900 #> [112,] -1.0284300 -0.4715700 #> [113,] -1.1063425 -0.3936575 #> [114,] -1.0212429 -0.4787571 #> [115,] -0.9157859 -0.5842141 #> [116,] -1.0124701 -0.4875299 #> [117,] -1.0536419 -0.4463581 #> [118,] -1.1019685 -0.3980315 #> [119,] -1.0224727 -0.4775273 #> [120,] -1.0695907 -0.4304093 #> [121,] -1.0213283 -0.4786717 #> [122,] -1.0053792 -0.4946208 #> [123,] -1.0011147 -0.4988853 #> [124,] -1.0301806 -0.4698194 #> [125,] -0.9868675 -0.5131325 #> [126,] -0.9735868 -0.5264132 #> [127,] -1.0096075 -0.4903925 #> [128,] -0.9426900 -0.5573100 #> [129,] -1.0423092 -0.4576908 #> [130,] -1.0040860 -0.4959140 #> [131,] -0.9347441 -0.5652559 #> [132,] -0.9527544 -0.5472456 #> [133,] -1.0227171 -0.4772829 #> [134,] -0.9572399 -0.5427601 #> [135,] -0.9856552 -0.5143448 #> [136,] -1.0447481 -0.4552519 #> [137,] -1.0033652 -0.4966348 #> [138,] -0.9918662 -0.5081338 #> [139,] -0.9586345 -0.5413655 #> [140,] -1.0938253 -0.4061747 #> [141,] -1.0383220 -0.4616780 #> [142,] -1.0489978 -0.4510022 #> [143,] -1.0660890 -0.4339110 #> [144,] -0.9440145 -0.5559855 #> [145,] -1.0257300 -0.4742700 #> [146,] -0.9245450 -0.5754550 #> [147,] -1.0766371 -0.4233629 #> [148,] -1.0214574 -0.4785426 #> [149,] -1.0061052 -0.4938948 #> [150,] -0.9430994 -0.5569006 #> [151,] -0.9720992 -0.5279008 #> [152,] -1.0526269 -0.4473731 #> [153,] -1.0338842 -0.4661158 #> [154,] -1.0019250 -0.4980750 #> [155,] -0.9821809 -0.5178191 #> [156,] -1.0391422 -0.4608578 #> [157,] -1.0402206 -0.4597794 #> [158,] -0.9049970 -0.5950030 #> [159,] -1.0467892 -0.4532108 #> [160,] -0.9845474 -0.5154526 #> [161,] -1.0131533 -0.4868467 #> [162,] -0.9104704 -0.5895296 #> [163,] -0.9605871 -0.5394129 #> [164,] -0.9433489 -0.5566511 #> [165,] -1.0181826 -0.4818174 #> [166,] -0.9857056 -0.5142944 #> [167,] -1.0258835 -0.4741165 #> [168,] -0.9948546 -0.5051454 #> [169,] -0.9512965 -0.5487035 #> [170,] -1.0635336 -0.4364664 #> [171,] -1.0480432 -0.4519568 #> [172,] -1.0384361 -0.4615639 #> [173,] -1.0517965 -0.4482035 #> [174,] -0.9763056 -0.5236944 #> [175,] -0.9362333 -0.5637667 #> [176,] -0.9847190 -0.5152810 #> [177,] -1.1105885 -0.3894115 #> [178,] -0.9479166 -0.5520834 #> [179,] -0.9426738 -0.5573262 #> [180,] -0.9162336 -0.5837664 #> [181,] -1.0762969 -0.4237031 #> [182,] -1.0277093 -0.4722907 #> [183,] -1.0996555 -0.4003445 #> [184,] -0.9922940 -0.5077060 #> [185,] -1.1282204 -0.3717796 #> [186,] -1.0531000 -0.4469000 #> [187,] -1.0571347 -0.4428653 #> [188,] -1.0561919 -0.4438081 #> [189,] -0.9801499 -0.5198501 #> [190,] -0.9588369 -0.5411631 #> [191,] -0.9710558 -0.5289442 #> [192,] -1.0881895 -0.4118105 #> [193,] -1.0066496 -0.4933504 #> [194,] -1.0188250 -0.4811750 #> [195,] -1.0569354 -0.4430646 #> [196,] -1.0620632 -0.4379368 #> [197,] -1.0306045 -0.4693955 #> [198,] -0.9785310 -0.5214690 #> [199,] -1.0680231 -0.4319769 #> [200,] -0.9964571 -0.5035429 #>  #> $linStatePrec #>            [,1]     [,2] #>   [1,] 1.648721 2.718282 #>   [2,] 1.648721 2.718282 #>   [3,] 1.648721 2.718282 #>   [4,] 1.648721 2.718282 #>   [5,] 1.648721 2.718282 #>   [6,] 1.648721 2.718282 #>   [7,] 1.648721 2.718282 #>   [8,] 1.648721 2.718282 #>   [9,] 1.648721 2.718282 #>  [10,] 1.648721 2.718282 #>  [11,] 1.648721 2.718282 #>  [12,] 1.648721 2.718282 #>  [13,] 1.648721 2.718282 #>  [14,] 1.648721 2.718282 #>  [15,] 1.648721 2.718282 #>  [16,] 1.648721 2.718282 #>  [17,] 1.648721 2.718282 #>  [18,] 1.648721 2.718282 #>  [19,] 1.648721 2.718282 #>  [20,] 1.648721 2.718282 #>  [21,] 1.648721 2.718282 #>  [22,] 1.648721 2.718282 #>  [23,] 1.648721 2.718282 #>  [24,] 1.648721 2.718282 #>  [25,] 1.648721 2.718282 #>  [26,] 1.648721 2.718282 #>  [27,] 1.648721 2.718282 #>  [28,] 1.648721 2.718282 #>  [29,] 1.648721 2.718282 #>  [30,] 1.648721 2.718282 #>  [31,] 1.648721 2.718282 #>  [32,] 1.648721 2.718282 #>  [33,] 1.648721 2.718282 #>  [34,] 1.648721 2.718282 #>  [35,] 1.648721 2.718282 #>  [36,] 1.648721 2.718282 #>  [37,] 1.648721 2.718282 #>  [38,] 1.648721 2.718282 #>  [39,] 1.648721 2.718282 #>  [40,] 1.648721 2.718282 #>  [41,] 1.648721 2.718282 #>  [42,] 1.648721 2.718282 #>  [43,] 1.648721 2.718282 #>  [44,] 1.648721 2.718282 #>  [45,] 1.648721 2.718282 #>  [46,] 1.648721 2.718282 #>  [47,] 1.648721 2.718282 #>  [48,] 1.648721 2.718282 #>  [49,] 1.648721 2.718282 #>  [50,] 1.648721 2.718282 #>  [51,] 1.648721 2.718282 #>  [52,] 1.648721 2.718282 #>  [53,] 1.648721 2.718282 #>  [54,] 1.648721 2.718282 #>  [55,] 1.648721 2.718282 #>  [56,] 1.648721 2.718282 #>  [57,] 1.648721 2.718282 #>  [58,] 1.648721 2.718282 #>  [59,] 1.648721 2.718282 #>  [60,] 1.648721 2.718282 #>  [61,] 1.648721 2.718282 #>  [62,] 1.648721 2.718282 #>  [63,] 1.648721 2.718282 #>  [64,] 1.648721 2.718282 #>  [65,] 1.648721 2.718282 #>  [66,] 1.648721 2.718282 #>  [67,] 1.648721 2.718282 #>  [68,] 1.648721 2.718282 #>  [69,] 1.648721 2.718282 #>  [70,] 1.648721 2.718282 #>  [71,] 1.648721 2.718282 #>  [72,] 1.648721 2.718282 #>  [73,] 1.648721 2.718282 #>  [74,] 1.648721 2.718282 #>  [75,] 1.648721 2.718282 #>  [76,] 1.648721 2.718282 #>  [77,] 1.648721 2.718282 #>  [78,] 1.648721 2.718282 #>  [79,] 1.648721 2.718282 #>  [80,] 1.648721 2.718282 #>  [81,] 1.648721 2.718282 #>  [82,] 1.648721 2.718282 #>  [83,] 1.648721 2.718282 #>  [84,] 1.648721 2.718282 #>  [85,] 1.648721 2.718282 #>  [86,] 1.648721 2.718282 #>  [87,] 1.648721 2.718282 #>  [88,] 1.648721 2.718282 #>  [89,] 1.648721 2.718282 #>  [90,] 1.648721 2.718282 #>  [91,] 1.648721 2.718282 #>  [92,] 1.648721 2.718282 #>  [93,] 1.648721 2.718282 #>  [94,] 1.648721 2.718282 #>  [95,] 1.648721 2.718282 #>  [96,] 1.648721 2.718282 #>  [97,] 1.648721 2.718282 #>  [98,] 1.648721 2.718282 #>  [99,] 1.648721 2.718282 #> [100,] 1.648721 2.718282 #> [101,] 1.648721 2.718282 #> [102,] 1.648721 2.718282 #> [103,] 1.648721 2.718282 #> [104,] 1.648721 2.718282 #> [105,] 1.648721 2.718282 #> [106,] 1.648721 2.718282 #> [107,] 1.648721 2.718282 #> [108,] 1.648721 2.718282 #> [109,] 1.648721 2.718282 #> [110,] 1.648721 2.718282 #> [111,] 1.648721 2.718282 #> [112,] 1.648721 2.718282 #> [113,] 1.648721 2.718282 #> [114,] 1.648721 2.718282 #> [115,] 1.648721 2.718282 #> [116,] 1.648721 2.718282 #> [117,] 1.648721 2.718282 #> [118,] 1.648721 2.718282 #> [119,] 1.648721 2.718282 #> [120,] 1.648721 2.718282 #> [121,] 1.648721 2.718282 #> [122,] 1.648721 2.718282 #> [123,] 1.648721 2.718282 #> [124,] 1.648721 2.718282 #> [125,] 1.648721 2.718282 #> [126,] 1.648721 2.718282 #> [127,] 1.648721 2.718282 #> [128,] 1.648721 2.718282 #> [129,] 1.648721 2.718282 #> [130,] 1.648721 2.718282 #> [131,] 1.648721 2.718282 #> [132,] 1.648721 2.718282 #> [133,] 1.648721 2.718282 #> [134,] 1.648721 2.718282 #> [135,] 1.648721 2.718282 #> [136,] 1.648721 2.718282 #> [137,] 1.648721 2.718282 #> [138,] 1.648721 2.718282 #> [139,] 1.648721 2.718282 #> [140,] 1.648721 2.718282 #> [141,] 1.648721 2.718282 #> [142,] 1.648721 2.718282 #> [143,] 1.648721 2.718282 #> [144,] 1.648721 2.718282 #> [145,] 1.648721 2.718282 #> [146,] 1.648721 2.718282 #> [147,] 1.648721 2.718282 #> [148,] 1.648721 2.718282 #> [149,] 1.648721 2.718282 #> [150,] 1.648721 2.718282 #> [151,] 1.648721 2.718282 #> [152,] 1.648721 2.718282 #> [153,] 1.648721 2.718282 #> [154,] 1.648721 2.718282 #> [155,] 1.648721 2.718282 #> [156,] 1.648721 2.718282 #> [157,] 1.648721 2.718282 #> [158,] 1.648721 2.718282 #> [159,] 1.648721 2.718282 #> [160,] 1.648721 2.718282 #> [161,] 1.648721 2.718282 #> [162,] 1.648721 2.718282 #> [163,] 1.648721 2.718282 #> [164,] 1.648721 2.718282 #> [165,] 1.648721 2.718282 #> [166,] 1.648721 2.718282 #> [167,] 1.648721 2.718282 #> [168,] 1.648721 2.718282 #> [169,] 1.648721 2.718282 #> [170,] 1.648721 2.718282 #> [171,] 1.648721 2.718282 #> [172,] 1.648721 2.718282 #> [173,] 1.648721 2.718282 #> [174,] 1.648721 2.718282 #> [175,] 1.648721 2.718282 #> [176,] 1.648721 2.718282 #> [177,] 1.648721 2.718282 #> [178,] 1.648721 2.718282 #> [179,] 1.648721 2.718282 #> [180,] 1.648721 2.718282 #> [181,] 1.648721 2.718282 #> [182,] 1.648721 2.718282 #> [183,] 1.648721 2.718282 #> [184,] 1.648721 2.718282 #> [185,] 1.648721 2.718282 #> [186,] 1.648721 2.718282 #> [187,] 1.648721 2.718282 #> [188,] 1.648721 2.718282 #> [189,] 1.648721 2.718282 #> [190,] 1.648721 2.718282 #> [191,] 1.648721 2.718282 #> [192,] 1.648721 2.718282 #> [193,] 1.648721 2.718282 #> [194,] 1.648721 2.718282 #> [195,] 1.648721 2.718282 #> [196,] 1.648721 2.718282 #> [197,] 1.648721 2.718282 #> [198,] 1.648721 2.718282 #> [199,] 1.648721 2.718282 #> [200,] 1.648721 2.718282 #>  #> $linStateProb #>             [,1]      [,2] #>   [1,] 0.7310586 0.2689414 #>   [2,] 0.7310586 0.2689414 #>   [3,] 0.7310586 0.2689414 #>   [4,] 0.7310586 0.2689414 #>   [5,] 0.7310586 0.2689414 #>   [6,] 0.7310586 0.2689414 #>   [7,] 0.7310586 0.2689414 #>   [8,] 0.7310586 0.2689414 #>   [9,] 0.7310586 0.2689414 #>  [10,] 0.7310586 0.2689414 #>  [11,] 0.7310586 0.2689414 #>  [12,] 0.7310586 0.2689414 #>  [13,] 0.7310586 0.2689414 #>  [14,] 0.7310586 0.2689414 #>  [15,] 0.7310586 0.2689414 #>  [16,] 0.7310586 0.2689414 #>  [17,] 0.7310586 0.2689414 #>  [18,] 0.7310586 0.2689414 #>  [19,] 0.7310586 0.2689414 #>  [20,] 0.7310586 0.2689414 #>  [21,] 0.7310586 0.2689414 #>  [22,] 0.7310586 0.2689414 #>  [23,] 0.7310586 0.2689414 #>  [24,] 0.7310586 0.2689414 #>  [25,] 0.7310586 0.2689414 #>  [26,] 0.7310586 0.2689414 #>  [27,] 0.7310586 0.2689414 #>  [28,] 0.7310586 0.2689414 #>  [29,] 0.7310586 0.2689414 #>  [30,] 0.7310586 0.2689414 #>  [31,] 0.7310586 0.2689414 #>  [32,] 0.7310586 0.2689414 #>  [33,] 0.7310586 0.2689414 #>  [34,] 0.7310586 0.2689414 #>  [35,] 0.7310586 0.2689414 #>  [36,] 0.7310586 0.2689414 #>  [37,] 0.7310586 0.2689414 #>  [38,] 0.7310586 0.2689414 #>  [39,] 0.7310586 0.2689414 #>  [40,] 0.7310586 0.2689414 #>  [41,] 0.7310586 0.2689414 #>  [42,] 0.7310586 0.2689414 #>  [43,] 0.7310586 0.2689414 #>  [44,] 0.7310586 0.2689414 #>  [45,] 0.7310586 0.2689414 #>  [46,] 0.7310586 0.2689414 #>  [47,] 0.7310586 0.2689414 #>  [48,] 0.7310586 0.2689414 #>  [49,] 0.7310586 0.2689414 #>  [50,] 0.7310586 0.2689414 #>  [51,] 0.7310586 0.2689414 #>  [52,] 0.7310586 0.2689414 #>  [53,] 0.7310586 0.2689414 #>  [54,] 0.7310586 0.2689414 #>  [55,] 0.7310586 0.2689414 #>  [56,] 0.7310586 0.2689414 #>  [57,] 0.7310586 0.2689414 #>  [58,] 0.7310586 0.2689414 #>  [59,] 0.7310586 0.2689414 #>  [60,] 0.7310586 0.2689414 #>  [61,] 0.7310586 0.2689414 #>  [62,] 0.7310586 0.2689414 #>  [63,] 0.7310586 0.2689414 #>  [64,] 0.7310586 0.2689414 #>  [65,] 0.7310586 0.2689414 #>  [66,] 0.7310586 0.2689414 #>  [67,] 0.7310586 0.2689414 #>  [68,] 0.7310586 0.2689414 #>  [69,] 0.7310586 0.2689414 #>  [70,] 0.7310586 0.2689414 #>  [71,] 0.7310586 0.2689414 #>  [72,] 0.7310586 0.2689414 #>  [73,] 0.7310586 0.2689414 #>  [74,] 0.7310586 0.2689414 #>  [75,] 0.7310586 0.2689414 #>  [76,] 0.7310586 0.2689414 #>  [77,] 0.7310586 0.2689414 #>  [78,] 0.7310586 0.2689414 #>  [79,] 0.7310586 0.2689414 #>  [80,] 0.7310586 0.2689414 #>  [81,] 0.7310586 0.2689414 #>  [82,] 0.7310586 0.2689414 #>  [83,] 0.7310586 0.2689414 #>  [84,] 0.7310586 0.2689414 #>  [85,] 0.7310586 0.2689414 #>  [86,] 0.7310586 0.2689414 #>  [87,] 0.7310586 0.2689414 #>  [88,] 0.7310586 0.2689414 #>  [89,] 0.7310586 0.2689414 #>  [90,] 0.7310586 0.2689414 #>  [91,] 0.7310586 0.2689414 #>  [92,] 0.7310586 0.2689414 #>  [93,] 0.7310586 0.2689414 #>  [94,] 0.7310586 0.2689414 #>  [95,] 0.7310586 0.2689414 #>  [96,] 0.7310586 0.2689414 #>  [97,] 0.7310586 0.2689414 #>  [98,] 0.7310586 0.2689414 #>  [99,] 0.7310586 0.2689414 #> [100,] 0.7310586 0.2689414 #> [101,] 0.7310586 0.2689414 #> [102,] 0.7310586 0.2689414 #> [103,] 0.7310586 0.2689414 #> [104,] 0.7310586 0.2689414 #> [105,] 0.7310586 0.2689414 #> [106,] 0.7310586 0.2689414 #> [107,] 0.7310586 0.2689414 #> [108,] 0.7310586 0.2689414 #> [109,] 0.7310586 0.2689414 #> [110,] 0.7310586 0.2689414 #> [111,] 0.7310586 0.2689414 #> [112,] 0.7310586 0.2689414 #> [113,] 0.7310586 0.2689414 #> [114,] 0.7310586 0.2689414 #> [115,] 0.7310586 0.2689414 #> [116,] 0.7310586 0.2689414 #> [117,] 0.7310586 0.2689414 #> [118,] 0.7310586 0.2689414 #> [119,] 0.7310586 0.2689414 #> [120,] 0.7310586 0.2689414 #> [121,] 0.7310586 0.2689414 #> [122,] 0.7310586 0.2689414 #> [123,] 0.7310586 0.2689414 #> [124,] 0.7310586 0.2689414 #> [125,] 0.7310586 0.2689414 #> [126,] 0.7310586 0.2689414 #> [127,] 0.7310586 0.2689414 #> [128,] 0.7310586 0.2689414 #> [129,] 0.7310586 0.2689414 #> [130,] 0.7310586 0.2689414 #> [131,] 0.7310586 0.2689414 #> [132,] 0.7310586 0.2689414 #> [133,] 0.7310586 0.2689414 #> [134,] 0.7310586 0.2689414 #> [135,] 0.7310586 0.2689414 #> [136,] 0.7310586 0.2689414 #> [137,] 0.7310586 0.2689414 #> [138,] 0.7310586 0.2689414 #> [139,] 0.7310586 0.2689414 #> [140,] 0.7310586 0.2689414 #> [141,] 0.7310586 0.2689414 #> [142,] 0.7310586 0.2689414 #> [143,] 0.7310586 0.2689414 #> [144,] 0.7310586 0.2689414 #> [145,] 0.7310586 0.2689414 #> [146,] 0.7310586 0.2689414 #> [147,] 0.7310586 0.2689414 #> [148,] 0.7310586 0.2689414 #> [149,] 0.7310586 0.2689414 #> [150,] 0.7310586 0.2689414 #> [151,] 0.7310586 0.2689414 #> [152,] 0.7310586 0.2689414 #> [153,] 0.7310586 0.2689414 #> [154,] 0.7310586 0.2689414 #> [155,] 0.7310586 0.2689414 #> [156,] 0.7310586 0.2689414 #> [157,] 0.7310586 0.2689414 #> [158,] 0.7310586 0.2689414 #> [159,] 0.7310586 0.2689414 #> [160,] 0.7310586 0.2689414 #> [161,] 0.7310586 0.2689414 #> [162,] 0.7310586 0.2689414 #> [163,] 0.7310586 0.2689414 #> [164,] 0.7310586 0.2689414 #> [165,] 0.7310586 0.2689414 #> [166,] 0.7310586 0.2689414 #> [167,] 0.7310586 0.2689414 #> [168,] 0.7310586 0.2689414 #> [169,] 0.7310586 0.2689414 #> [170,] 0.7310586 0.2689414 #> [171,] 0.7310586 0.2689414 #> [172,] 0.7310586 0.2689414 #> [173,] 0.7310586 0.2689414 #> [174,] 0.7310586 0.2689414 #> [175,] 0.7310586 0.2689414 #> [176,] 0.7310586 0.2689414 #> [177,] 0.7310586 0.2689414 #> [178,] 0.7310586 0.2689414 #> [179,] 0.7310586 0.2689414 #> [180,] 0.7310586 0.2689414 #> [181,] 0.7310586 0.2689414 #> [182,] 0.7310586 0.2689414 #> [183,] 0.7310586 0.2689414 #> [184,] 0.7310586 0.2689414 #> [185,] 0.7310586 0.2689414 #> [186,] 0.7310586 0.2689414 #> [187,] 0.7310586 0.2689414 #> [188,] 0.7310586 0.2689414 #> [189,] 0.7310586 0.2689414 #> [190,] 0.7310586 0.2689414 #> [191,] 0.7310586 0.2689414 #> [192,] 0.7310586 0.2689414 #> [193,] 0.7310586 0.2689414 #> [194,] 0.7310586 0.2689414 #> [195,] 0.7310586 0.2689414 #> [196,] 0.7310586 0.2689414 #> [197,] 0.7310586 0.2689414 #> [198,] 0.7310586 0.2689414 #> [199,] 0.7310586 0.2689414 #> [200,] 0.7310586 0.2689414 #>"},{"path":"https://adamklimes.github.io/mixglm/reference/mixglmSpecification.html","id":null,"dir":"Reference","previous_headings":"","what":"Create NIMBLE Model Structures for a mixture model — mixglmSpecification","title":"Create NIMBLE Model Structures for a mixture model — mixglmSpecification","text":"Mainly internal use. function takes set model specifications three sub-models mixture model generates set structures initialisation NIMBLE model","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/mixglmSpecification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create NIMBLE Model Structures for a mixture model — mixglmSpecification","text":"","code":"mixglmSpecification(   stateValModels,   stateProbModels,   statePrecModels,   inputData,   numStates = NULL,   stateValError = gaussian,   setPriors = list(stateVal = list(int1 = \"dnorm(0.0, 0.001)\", int2 = \"dgamma(1.0, 0.5)\",     pred = \"dnorm(0.0, 0.001)\"), stateProb = list(int2 = \"dnorm(0.0, 0.001)\", pred =     \"dnorm(0.0, 0.001)\"), statePrec = list(int = \"dnorm(0.0, 0.001)\", pred =     \"dnorm(0.0, 0.001)\")) )"},{"path":"https://adamklimes.github.io/mixglm/reference/mixglmSpecification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create NIMBLE Model Structures for a mixture model — mixglmSpecification","text":"stateValModels formula describing regression relationship mean response variable covariates mixture components, list formulas element giving regression relationship mean response variable covariates mixture component (ordered according intercept mixture component y-axis).  response variable must given left-hand side formula. stateProbModels formula describing regression relationship probability existence mixture components covariates, list formulas element giving regression relationship probability existence mixture component covariates (ordered according intercept mixture component y-axis). statePrecModels formula describing regression relationship variances mixture components covariates, list formulas mixture component giving regression relationship variance mixture component covariates mixture component (ordered according intercept mixture component y-axis). inputData data frame containing covariate information response variable. numStates integer scalar containing number mixture components. stateValModels, stateProbModels, statePrecModels parameters list numStates can omitted therefore set length list. stateValError description error distribution link function used model describing response variable.  can family specification character scalar following possible values: \"gaussian\", \"gamma\", \"beta\", \"negbinomial\". setPriors named list prior distributions. Distribution specified using character strings. sublists provided, values list distributed sublist items allowing specify several priors . Sublist items \"int\", specification priors intercept parameters, \"pred\", specification priors predictor/covariate parameters. \"int\" followed \"1\" \"2\" marking priors first intercept intercepts respectively. full structure list see default values. Prior \"stateVal$Int2\" allow positive values ensure distinctness states.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/mixglmSpecification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create NIMBLE Model Structures for a mixture model — mixglmSpecification","text":"list containing following components: modelText character scalar containing text model specification NIMBLE BUGS dialect modelCode nimbleCode object containing model specification constants list containing constants provided NIMBLE data list containing data provided NIMBLE errorModel factor containing error model used specification error distribution response variable linkFunction factor containing link function used specification mixture model initialValues list containing potential initial values stochastic nodes NIMBLE model specification","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/mixglmSpecification.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create NIMBLE Model Structures for a mixture model — mixglmSpecification","text":"Joseph D. Chipperfield joechip90@googlemail.com, Adam Klimes","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/mixglmSpecification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create NIMBLE Model Structures for a mixture model — mixglmSpecification","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(10) n <- 200 x <- rnorm(n) group <- rbinom(n, 1, 0.5) y <- rnorm(n, 1 + 0.5 * x * c(-1, 1)[group + 1], 0.1) plot(y ~ x) dat <- data.frame(x, y)  modSpecification <- mixglmSpecification(   stateValModels = y ~ x,   stateProbModels = ~ x,   statePrecModels = ~ x,   inputData = dat,   numStates = 2) } # } mod <- mixglm(mixglmSpecif = modSpecification,   mcmcChains = 2) #> Error: object 'modSpecification' not found"},{"path":"https://adamklimes.github.io/mixglm/reference/plot.mixglm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot results of a mixture model — plot.mixglm","title":"Plot results of a mixture model — plot.mixglm","text":"function plots results mixture model current graphical device.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/plot.mixglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot results of a mixture model — plot.mixglm","text":"","code":"# S3 method for class 'mixglm' plot(   x,   form = NULL,   byChains = TRUE,   transCol = TRUE,   addWAIC = FALSE,   setCol = c(\"#1b9e77\", \"#d95f02\", \"#7570b3\", \"#e7298a\", \"#66a61e\", \"#e6ab02\", \"#a6761d\",     \"#666666\"),   drawAxes = TRUE,   SDmult = 1,   xlab = NULL,   ylab = NULL,   doPlot = TRUE,   xSamples = 100,   ... )"},{"path":"https://adamklimes.github.io/mixglm/reference/plot.mixglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot results of a mixture model — plot.mixglm","text":"x object class \"mixglm\" form formula, y ~ pred, specifying variables plotted. default first predictor plotted x axis. byChains logical value indicating whether plot mixture components chain transCol logical value indicating usage transparent colours addWAIC logical value indication display WAIC upper right corner plot setCol vector colours used mixture components drawAxes logical value indicating whether values marked axes SDmult scalar multiplying visualized standard deviation (make lines small standard deviation visible) xlab label x axis, defaults predictor name. ylab label y axis, defaults response name. doPlot logical value indicating plotting done xSamples integer value specifying number values regularly distributed along x-axis estimates calculated ... additional arguments passed plot","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/plot.mixglm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot results of a mixture model — plot.mixglm","text":"Returns invisibly list lists chain. lists contain dataframe mixture component: x Values along x-axis estimates calculated prob Probability component mixture along x-axis yEst Mean component mixture along x-axis yLow Mean minus SDmult times standard deviation component mixture along x-axis yUpp Mean plus SDmult times standard deviation component mixture along x-axis","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/plot.mixglm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot results of a mixture model — plot.mixglm","text":"Adam Klimes","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/plot.mixglm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot results of a mixture model — plot.mixglm","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(10) n <- 200 x <- rnorm(n) group <- rbinom(n, 1, 0.5) y <- rnorm(n, 1 + 0.5 * x * c(-1, 1)[group + 1], 0.1) plot(y ~ x) dat <- data.frame(x, y)  mod <- mixglm(   stateValModels = y ~ x,   stateProbModels = ~ x,   statePrecModels = ~ x,   inputData = dat,   numStates = 2) plot(mod)} # }"},{"path":"https://adamklimes.github.io/mixglm/reference/predict.mixglm.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict from mixglm — predict.mixglm","title":"Predict from mixglm — predict.mixglm","text":"function calculates stability curves resilience metrics based mixture model","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/predict.mixglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict from mixglm — predict.mixglm","text":"","code":"# S3 method for class 'mixglm' predict(object, newdata = NULL, samples = 1000, threshold = 0, ...)"},{"path":"https://adamklimes.github.io/mixglm/reference/predict.mixglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict from mixglm — predict.mixglm","text":"object object class \"mixglm\" newdata dataframe predictor values. contains column response variable, obsDat returned. provided, prediction done modelled data. samples number samples take along response variable threshold number 0 1 denoting pronounced stable states marked considerable ... arguments passed methods.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/predict.mixglm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict from mixglm — predict.mixglm","text":"list containing following components: sampledResp numeric vector samples along response variable probCurves data frame stability curves observation tipStable list data.frames observation stable states tipping points, scaled probability density response variable value, whether stable states, whether satisfy threshold obsDat data frame containing values response variable, potential energy, distance closest tipping point stable state observation, potential depth defined difference potential energy observation closest tipping point","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/predict.mixglm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict from mixglm — predict.mixglm","text":"Adam Klimes","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/predict.mixglm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict from mixglm — predict.mixglm","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(10) n <- 200 x <- rnorm(n) group <- rbinom(n, 1, 0.5) y <- rnorm(n, 1 + 0.5 * x * c(-1, 1)[group + 1], 0.1) plot(y ~ x) dat <- data.frame(x, y)  mod <- mixglm(   stateValModels = y ~ x,   stateProbModels = ~ x,   statePrecModels = ~ x,   inputData = dat,   numStates = 2) predict(mod)  # predict for newdata pre <- predict(mod, newdata = data.frame(x = c(0.5, 1), y = c(0.3, 0.2))) plot(pre$sampledResp, pre$probCurves$X1, type = \"l\") plot(pre$sampledResp, pre$probCurves$X2, type = \"l\")} # }"},{"path":"https://adamklimes.github.io/mixglm/reference/print.mixglm.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a mixture model — print.mixglm","title":"Print a mixture model — print.mixglm","text":"function prints summary information mixglm","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/print.mixglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a mixture model — print.mixglm","text":"","code":"# S3 method for class 'mixglm' print(x, ...)"},{"path":"https://adamklimes.github.io/mixglm/reference/print.mixglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a mixture model — print.mixglm","text":"x object class \"mixglm\" ... arguments passed methods.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/print.mixglm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a mixture model — print.mixglm","text":"Invisibly returns x","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/print.mixglm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print a mixture model — print.mixglm","text":"Adam Klimes","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/rMixglm.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly generate data from a mixture model — rMixglm","title":"Randomly generate data from a mixture model — rMixglm","text":"Random generation response variable identified mixture model","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/rMixglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly generate data from a mixture model — rMixglm","text":"","code":"rMixglm(mod, n = 1, newdata = NULL)"},{"path":"https://adamklimes.github.io/mixglm/reference/rMixglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly generate data from a mixture model — rMixglm","text":"mod object class \"mixglm\" n number generated values per predictor value(s) newdata data.frame predictor values predicted . provided, prediction done modelled data.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/rMixglm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly generate data from a mixture model — rMixglm","text":"matrix column n","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/rMixglm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Randomly generate data from a mixture model — rMixglm","text":"Adam Klimes","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/rMixglm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly generate data from a mixture model — rMixglm","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(10) n <- 200 x <- rnorm(n) group <- rbinom(n, 1, 0.5) y <- rnorm(n, 1 + 0.5 * x * c(-1, 1)[group + 1], 0.1) plot(y ~ x) dat <- data.frame(x, y)  mod <- mixglm(   stateValModels = y ~ x,   stateProbModels = ~ x,   statePrecModels = ~ x,   inputData = dat,   numStates = 2) rMixglm(mod, n = 3)  # for newdata rMixglm(mod, n = 3, newdata = data.frame(x = c(0, 0.5)))} # }"},{"path":"https://adamklimes.github.io/mixglm/reference/rbetaStateValueMembership.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Variable from a beta mixture (Beta Error) — rbetaStateValueMembership","title":"Simulate a Variable from a beta mixture (Beta Error) — rbetaStateValueMembership","text":"Simulate variable beta mixture.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/rbetaStateValueMembership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Variable from a beta mixture (Beta Error) — rbetaStateValueMembership","text":"","code":"rbetaStateValueMembership(n, stateVal, statePrec, stateProb)"},{"path":"https://adamklimes.github.io/mixglm/reference/rbetaStateValueMembership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Variable from a beta mixture (Beta Error) — rbetaStateValueMembership","text":"n integer scalar containing number variables simulate (NIMBLE currently allows n = 1) stateVal numeric vector containing mean values mixture components statePrec numeric vector containing precision (reciprocal variance) mixture components stateProb numeric vector containing probabilities belonging mixture component (internally normalised one)","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/rbetaStateValueMembership.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Variable from a beta mixture (Beta Error) — rbetaStateValueMembership","text":"scalar containing simulated response variable","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/rbetaStateValueMembership.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a Variable from a beta mixture (Beta Error) — rbetaStateValueMembership","text":"Joseph D. Chipperfield, joechip90@googlemail.com","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/rgammaStateValueMembership.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Variable from a gamma mixture (Gamma Error) — rgammaStateValueMembership","title":"Simulate a Variable from a gamma mixture (Gamma Error) — rgammaStateValueMembership","text":"Simulate variable gamma mixture.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/rgammaStateValueMembership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Variable from a gamma mixture (Gamma Error) — rgammaStateValueMembership","text":"","code":"rgammaStateValueMembership(n, stateVal, statePrec, stateProb)"},{"path":"https://adamklimes.github.io/mixglm/reference/rgammaStateValueMembership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Variable from a gamma mixture (Gamma Error) — rgammaStateValueMembership","text":"n integer scalar containing number variables simulate (NIMBLE currently allows n = 1) stateVal numeric vector containing mean values mixture components statePrec numeric vector containing precision (reciprocal variance) mixture components stateProb numeric vector containing probabilities belonging mixture component (internally normalised one)","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/rgammaStateValueMembership.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Variable from a gamma mixture (Gamma Error) — rgammaStateValueMembership","text":"scalar containing simulated response variable","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/rgammaStateValueMembership.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a Variable from a gamma mixture (Gamma Error) — rgammaStateValueMembership","text":"Joseph D. Chipperfield, joechip90@googlemail.com","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/rnegbinStateValueMembership.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Variable from a negative binomial mixture (Negative Binomial Error) — rnegbinStateValueMembership","title":"Simulate a Variable from a negative binomial mixture (Negative Binomial Error) — rnegbinStateValueMembership","text":"Simulate variable negative binomial mixture.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/rnegbinStateValueMembership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Variable from a negative binomial mixture (Negative Binomial Error) — rnegbinStateValueMembership","text":"","code":"rnegbinStateValueMembership(n, stateVal, statePrec, stateProb)"},{"path":"https://adamklimes.github.io/mixglm/reference/rnegbinStateValueMembership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Variable from a negative binomial mixture (Negative Binomial Error) — rnegbinStateValueMembership","text":"n integer scalar containing number variables simulate (NIMBLE currently allows n = 1) stateVal numeric vector containing mean values mixture components statePrec numeric vector containing precision (reciprocal variance) mixture components stateProb numeric vector containing probabilities belonging mixture component (internally normalised one)","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/rnegbinStateValueMembership.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Variable from a negative binomial mixture (Negative Binomial Error) — rnegbinStateValueMembership","text":"scalar containing simulated response variable","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/rnegbinStateValueMembership.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a Variable from a negative binomial mixture (Negative Binomial Error) — rnegbinStateValueMembership","text":"Joseph D. Chipperfield, joechip90@googlemail.com","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/rnormStateValueMembership.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Variable from a Gaussian mixture (Normal Error) — rnormStateValueMembership","title":"Simulate a Variable from a Gaussian mixture (Normal Error) — rnormStateValueMembership","text":"Simulate variable Gaussian mixture.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/rnormStateValueMembership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Variable from a Gaussian mixture (Normal Error) — rnormStateValueMembership","text":"","code":"rnormStateValueMembership(n, stateVal, statePrec, stateProb)"},{"path":"https://adamklimes.github.io/mixglm/reference/rnormStateValueMembership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Variable from a Gaussian mixture (Normal Error) — rnormStateValueMembership","text":"n integer scalar containing number variables simulate (NIMBLE currently allows n = 1) stateVal numeric vector containing mean values mixture components statePrec numeric vector containing precision (reciprocal variance) mixture components stateProb numeric vector containing probabilities belonging mixture component (internally normalised one)","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/rnormStateValueMembership.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Variable from a Gaussian mixture (Normal Error) — rnormStateValueMembership","text":"scalar containing simulated response variable","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/rnormStateValueMembership.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a Variable from a Gaussian mixture (Normal Error) — rnormStateValueMembership","text":"Joseph D. Chipperfield, joechip90@googlemail.com","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/setBUGSVariableName.html","id":null,"dir":"Reference","previous_headings":"","what":"Change Variable Names to BUGS-Friendly Versions — setBUGSVariableName","title":"Change Variable Names to BUGS-Friendly Versions — setBUGSVariableName","text":"potential variable names used R can used BUGS code without producing syntax error.  function changes vector input names ensures valid BUGS variable names.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/setBUGSVariableName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change Variable Names to BUGS-Friendly Versions — setBUGSVariableName","text":"","code":"setBUGSVariableName(inName, warn = FALSE)"},{"path":"https://adamklimes.github.io/mixglm/reference/setBUGSVariableName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change Variable Names to BUGS-Friendly Versions — setBUGSVariableName","text":"inName character vector variable names warn logical value specifying warnings printed change variable name","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/setBUGSVariableName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change Variable Names to BUGS-Friendly Versions — setBUGSVariableName","text":"character vector BUGS-compliant variable names","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/setBUGSVariableName.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Change Variable Names to BUGS-Friendly Versions — setBUGSVariableName","text":"Joseph D. Chipperfield, joechip90@googlemail.com","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/sliceMixglm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot slice from mixglm — sliceMixglm","title":"Plot slice from mixglm — sliceMixglm","text":"function plots probability density given predictor value","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/sliceMixglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot slice from mixglm — sliceMixglm","text":"","code":"sliceMixglm(   mod,   form = NULL,   value = 0,   byChains = TRUE,   xlab = names(mod$data),   doPlot = TRUE,   setCol = c(\"#1b9e77\", \"#d95f02\", \"#7570b3\", \"#e7298a\", \"#66a61e\", \"#e6ab02\", \"#a6761d\",     \"#666666\"),   plotEst = TRUE,   xaxis = TRUE,   addEcos = FALSE,   ecosTol = 0.1,   samples = 1000,   randomSample = NULL,   getParsD = FALSE,   respIn = NULL )"},{"path":"https://adamklimes.github.io/mixglm/reference/sliceMixglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot slice from mixglm — sliceMixglm","text":"mod object class \"mixglm\" form formula one predictor specifying variables plot value numeric vector values preditor specified \"form\" slice done data.frame values predictors named columns byChains logical value indicating slice done chain separately xlab string used label x-axis doPlot logical value indicating plotting done setCol vector colours used visualization estimated states plotEst logical value indicating estimated mixture components visualized xaxis logical value indicating values marked x-axis addEcos logical value indicating observations within \"ecosTol\" \"value\" visualized stability curve ecosTol scalar specifying range predictor \"value\" select observations visualized samples scalar specifying number samples taken along predictor randomSample integer specifying many random samples posterior distribution take instead summary. Use \"NULL\" summary. getParsD logical value indicating output parameters distributions instead slice. Requires doPlot FALSE respIn mainly internal use. Numeric vector specifying values along response variable compute probability density.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/sliceMixglm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot slice from mixglm — sliceMixglm","text":"Returns invisibly list containing following components: chainX One items matrix probability density values along response column value. One item returned byChains TRUE, otherwise one item chain. getParsD TRUE, parameters probability density distributions returned instead. densFun getParsD TRUE, function calculation probability density returned. resp vector response values stability curves evaluated","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/sliceMixglm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot slice from mixglm — sliceMixglm","text":"Adam Klimes","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/sliceMixglm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot slice from mixglm — sliceMixglm","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(10) n <- 200 x <- rnorm(n) group <- rbinom(n, 1, 0.5) y <- rnorm(n, 1 + 0.5 * x * c(-1, 1)[group + 1], 0.1) plot(y ~ x) dat <- data.frame(x, y)  mod <- mixglm(   stateValModels = y ~ x,   stateProbModels = ~ x,   statePrecModels = ~ x,   inputData = dat,   numStates = 2) sliceMixglm(mod, value = 1)  # plot including observations around x == 1 sliceMixglm(mod, value = 1, addEcos = TRUE)  # plot 5 random samples from posterior distribution sliceMixglm(mod, value = 1, randomSample = 5, byChain = FALSE)} # }"},{"path":"https://adamklimes.github.io/mixglm/reference/str.mixglm.html","id":null,"dir":"Reference","previous_headings":"","what":"Compactly Display the Structure of a mixglm object — str.mixglm","title":"Compactly Display the Structure of a mixglm object — str.mixglm","text":"Compactly display internal structure mixglm object","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/str.mixglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compactly Display the Structure of a mixglm object — str.mixglm","text":"","code":"# S3 method for class 'mixglm' str(object, max.level = 2, give.attr = FALSE, ...)"},{"path":"https://adamklimes.github.io/mixglm/reference/str.mixglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compactly Display the Structure of a mixglm object — str.mixglm","text":"object object class \"mixglm\" max.level integer giving maximal level nesting displayed structures give.attr logical indicating attributes shown ... arguments passed NextMethod","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/str.mixglm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compactly Display the Structure of a mixglm object — str.mixglm","text":"Adam Klimes","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/summary.mixglm.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a mixture model — summary.mixglm","title":"Summarize a mixture model — summary.mixglm","text":"function calculates posterior quantiles parameters mixture model across chains chain separately","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/summary.mixglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a mixture model — summary.mixglm","text":"","code":"# S3 method for class 'mixglm' summary(   object,   byChains = FALSE,   digit = 4L,   absInt = FALSE,   randomSample = NULL,   ... )"},{"path":"https://adamklimes.github.io/mixglm/reference/summary.mixglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a mixture model — summary.mixglm","text":"object object class \"mixglm\" byChains logical value indicating summary calculated chain separately digit integer specifying number decimal places used. Use \"NULL\" rounding. absInt logical value indicating intercepts state values absolute (default, represent differences) randomSample integer specifying many random samples posterior distribution take instead summary. Use \"NULL\" summary. ... arguments passed methods.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/summary.mixglm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a mixture model — summary.mixglm","text":"Returns list one item data.frame quantiles posterior distributions parameters. byChains TRUE, data.frame returned chain.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/summary.mixglm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarize a mixture model — summary.mixglm","text":"Adam Klimes","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/summary.mixglm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize a mixture model — summary.mixglm","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(10) n <- 200 x <- rnorm(n) group <- rbinom(n, 1, 0.5) y <- rnorm(n, 1 + 0.5 * x * c(-1, 1)[group + 1], 0.1) plot(y ~ x) dat <- data.frame(x, y)  mod <- mixglm(   stateValModels = y ~ x,   stateProbModels = ~ x,   statePrecModels = ~ x,   inputData = dat,   numStates = 2) summary(mod)  # random samples of parameters from posterior distribution summary(mod, randomSample = 5)} # }"},{"path":"https://adamklimes.github.io/mixglm/reference/treeCover.html","id":null,"dir":"Reference","previous_headings":"","what":"Tree cover data for South America — treeCover","title":"Tree cover data for South America — treeCover","text":"Tree cover, precipitation, temperature, predicted precipitation data random set 5000 locations South America.","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/treeCover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tree cover data for South America — treeCover","text":"","code":"treeCover"},{"path":"https://adamklimes.github.io/mixglm/reference/treeCover.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tree cover data for South America — treeCover","text":"`treeCover` data frame 5,000 rows 6 columns: x Longitude degrees y Latitude degrees treeCover Percentage tree cover 250m large pixel precip Mean yearly precipitation computed 1981-2010 millimeters temp Mean temperature computed 1981-2010 °C precip2100 Predicted yearly precipitation 2081-2100 based RCP4.5 scenatio millimeters","code":""},{"path":"https://adamklimes.github.io/mixglm/reference/treeCover.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Tree cover data for South America — treeCover","text":"treeCover <https://doi.org/10.5067/MODIS/MOD44B.061/> precip, temp <https://chelsa-climate.org/exchelsa-extended-bioclim/> precip2100 Gutiérrez et al., 2021; Iturbide et al., 2021","code":""}]
